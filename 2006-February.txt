From friedrij at berlios.de  Wed Feb  1 13:42:21 2006
From: friedrij at berlios.de (friedrij at BerliOS)
Date: Wed, 1 Feb 2006 13:42:21 +0100
Subject: [vidprofile-svn] r41 - trunk/src
Message-ID: <200602011242.k11CgL2u023361@sheep.berlios.de>

Author: friedrij
Date: 2006-02-01 13:41:49 +0100 (Wed, 01 Feb 2006)
New Revision: 41

Modified:
   trunk/src/lib-vidprofile.sh.in
Log:
new lib function: verify

Modified: trunk/src/lib-vidprofile.sh.in
===================================================================
--- trunk/src/lib-vidprofile.sh.in	2006-01-21 15:35:21 UTC (rev 40)
+++ trunk/src/lib-vidprofile.sh.in	2006-02-01 12:41:49 UTC (rev 41)
@@ -105,4 +105,50 @@
   else
     mkdir "$VIDPROFILE_HOME"
   fi
-}
\ No newline at end of file
+}
+
+# ******************************************************************************
+# Verify that a variable meets certain conditions
+# Usage: verify $VAR set|range "test limits"
+# Input: $1 = the variable to check
+#        $2 = the kind of test to perform (set|range)
+#             set: test if $VAR is in the space-separated set "test limits"
+#             range: test if $VAR is in the range given by "test limits"
+#        $3 = the limits for the test
+#
+# ex: verify $CMD_LN_OPT set "y n Y N"
+#     will return ":" (true) if $CMD_LN_OPT is one of "y n Y N"
+#     or retern "false" if it isn't (so if $CMD_LN_OPT was "no", you'd get "false")
+#
+# ex: verify $CMD_LN_OPT range "0 10"
+#     will return ":" (true) if 0 <= $CMD_LN_OPT <= 10
+# ******************************************************************************
+verify ()
+{
+  VERIFY_VAR=$1
+  VERIFY_TEST_TYPE=$2
+  case $VERIFY_TEST_TYPE in
+     "range" )
+     VERIFY_LOW=`echo "$3" | awk '{ print $1 }'`
+     VERIFY_HIGH=`echo "$3" | awk '{ print $2 }'`
+
+     if test $VERIFY_LOW -le $VERIFY_VAR && \
+        test $VERIFY_HIGH -ge $VERIFY_VAR
+     then
+        echo ":"
+     else
+        echo "false"
+     fi 
+     ;;
+
+     "set" )
+     VERIFY_SET="$3"
+
+     if echo "$VERIFY_SET" | grep "$VERIFY_VAR" >> /dev/null 2>&1; then
+         echo ":"
+     else
+         echo "false"
+     fi
+     ;;
+  esac
+}



From friedrij at berlios.de  Mon Feb  6 10:23:52 2006
From: friedrij at berlios.de (friedrij at BerliOS)
Date: Mon, 6 Feb 2006 10:23:52 +0100
Subject: [vidprofile-svn] r42 - in trunk: . src
Message-ID: <200602060923.k169NqJu032128@sheep.berlios.de>

Author: friedrij
Date: 2006-02-06 10:23:51 +0100 (Mon, 06 Feb 2006)
New Revision: 42

Modified:
   trunk/bootstrap
   trunk/src/Makefile.am
Log:
tweaked autotools - more POSIX compliannt shell script building. 'command -v sh'.

Modified: trunk/bootstrap
===================================================================
--- trunk/bootstrap	2006-02-01 12:41:49 UTC (rev 41)
+++ trunk/bootstrap	2006-02-06 09:23:51 UTC (rev 42)
@@ -23,6 +23,8 @@
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
+make distclean
+
 rm -rvf "autom4te.cache"
 rm -rvf aclocal.m4 config.log config.status configure \
         Makefile Makefile.in
@@ -31,4 +33,8 @@
 
 aclocal \
 && automake --gnu --add-missing \
-&& autoconf
\ No newline at end of file
+&& autoconf
+
+echo
+echo "Done. Type './configure && su -c \"make install\"' to install."
+echo
\ No newline at end of file

Modified: trunk/src/Makefile.am
===================================================================
--- trunk/src/Makefile.am	2006-02-01 12:41:49 UTC (rev 41)
+++ trunk/src/Makefile.am	2006-02-06 09:23:51 UTC (rev 42)
@@ -53,6 +53,6 @@
 # http://www.gnu.org/software/make/manual/html_mono/make.html#SEC47
 $(sh_bin): %: %.sh
 	rm -f "$@"
-	echo "#! `which env` sh"  > $@
+	echo "#! `command -v sh`"  > $@
 	cat $(srcdir)/$< >> $@
 	chmod ugo+x $@



From friedrij at berlios.de  Thu Feb 16 10:15:02 2006
From: friedrij at berlios.de (friedrij at BerliOS)
Date: Thu, 16 Feb 2006 10:15:02 +0100
Subject: [vidprofile-svn] r44 - trunk/doc
Message-ID: <200602160915.k1G9F2p2004979@sheep.berlios.de>

Author: friedrij
Date: 2006-02-16 10:15:01 +0100 (Thu, 16 Feb 2006)
New Revision: 44

Modified:
   trunk/doc/mkdocs
   trunk/doc/pkdocs
Log:
better error handling

Modified: trunk/doc/mkdocs
===================================================================
--- trunk/doc/mkdocs	2006-02-16 09:06:47 UTC (rev 43)
+++ trunk/doc/mkdocs	2006-02-16 09:15:01 UTC (rev 44)
@@ -44,4 +44,4 @@
 echo "$ME Docs made!"
 echo
 
-exit 0
\ No newline at end of file
+exit 0

Modified: trunk/doc/pkdocs
===================================================================
--- trunk/doc/pkdocs	2006-02-16 09:06:47 UTC (rev 43)
+++ trunk/doc/pkdocs	2006-02-16 09:15:01 UTC (rev 44)
@@ -17,28 +17,40 @@
 
 echo "$ME Executing mkdocs..."
 echo
-$PKDOCS_PWD/mkdocs
+if $PKDOCS_PWD/mkdocs; then :
+else
+   echo "$ME Couldn't make the docs!"
+   echo "$ME Exiting..."
+   exit 1
 
 echo "$ME Packing html files..."
-
 cd $PKDOCS_PWD/$HTML_DIR
-
 rm -f $HTML_GZ
-tar -cf $HTML_TAR *.html *.php *.css fig/*
-gzip $HTML_TAR
-rm -f $HTML_TAR
+if tar -cf $HTML_TAR *.html *.php *.css fig/* && \
+   gzip $HTML_TAR && \
+   rm -f $HTML_TAR
+then :
+else
+   echo "$ME Couldn't zip the html files!"
+   echo "$ME Exiting..."
+   exit 1
+fi
 
 echo "$ME Packing t2t files..."
-
 cd $PKDOCS_PWD/$T2T_DIR
-
 rm -f $T2T_GZ
-tar -cf $T2T_TAR *.t2t *.html
-gzip $T2T_TAR
-rm -f $T2T_TAR
-mv $T2T_GZ $PKDOCS_PWD/$HTML_DIR
+if tar -cf $T2T_TAR *.t2t *.html && \
+   gzip $T2T_TAR && \
+   rm -f $T2T_TAR && \
+   mv $T2T_GZ $PKDOCS_PWD/$HTML_DIR
+then :
+else
+   echo "$ME Couldn't zip the t2t files!"
+   echo "$ME Exiting..."
+   exit 1
+fi  
 
 echo "$ME Docs packed!"
 echo
 
-exit 0
\ No newline at end of file
+exit 0



From friedrij at berlios.de  Thu Feb 16 10:19:12 2006
From: friedrij at berlios.de (friedrij at BerliOS)
Date: Thu, 16 Feb 2006 10:19:12 +0100
Subject: [vidprofile-svn] r45 - trunk/doc/src
Message-ID: <200602160919.k1G9JCHm005464@sheep.berlios.de>

Author: friedrij
Date: 2006-02-16 10:19:12 +0100 (Thu, 16 Feb 2006)
New Revision: 45

Modified:
   trunk/doc/src/setup.t2t
Log:
revised install instructions

Modified: trunk/doc/src/setup.t2t
===================================================================
--- trunk/doc/src/setup.t2t	2006-02-16 09:15:01 UTC (rev 44)
+++ trunk/doc/src/setup.t2t	2006-02-16 09:19:12 UTC (rev 45)
@@ -86,26 +86,19 @@
 ```
 FINAL SUMMARY
 
-  Required dependencies
-    grep:               /bin/grep
-    mplayer:            /usr/local/bin/mplayer
-    mpeg2enc:           /usr/bin/mpeg2enc
-    bc:                 /usr/bin/bc
+  Required dependencies: ALL FOUND
 
-  Optional dependencies
-    pnmpsnr:            pnmpsnr
+  Optional dependencies: ALL FOUND
+    pnmpsnr:       ok
 
-configure: creating ./config.status
-config.status: creating Makefile
-config.status: creating src/Makefile
-config.status: creating doc/Makefile
-config.status: creating src/lib-vidprofile.sh
+SUCCESS!!
+  Type 'su -c "make install"' to compile and install vidprofile.
+
 ```
 
 Then compile and install your properly configured package:
 
 ```
-$ make
 $ su -c "make install"
 ```
 



From friedrij at berlios.de  Thu Feb 16 10:21:54 2006
From: friedrij at berlios.de (friedrij at BerliOS)
Date: Thu, 16 Feb 2006 10:21:54 +0100
Subject: [vidprofile-svn] r46 - trunk/doc/src
Message-ID: <200602160921.k1G9LsGe005746@sheep.berlios.de>

Author: friedrij
Date: 2006-02-16 10:21:54 +0100 (Thu, 16 Feb 2006)
New Revision: 46

Modified:
   trunk/doc/src/setup.t2t
Log:
typo

Modified: trunk/doc/src/setup.t2t
===================================================================
--- trunk/doc/src/setup.t2t	2006-02-16 09:19:12 UTC (rev 45)
+++ trunk/doc/src/setup.t2t	2006-02-16 09:21:54 UTC (rev 46)
@@ -93,7 +93,6 @@
 
 SUCCESS!!
   Type 'su -c "make install"' to compile and install vidprofile.
-
 ```
 
 Then compile and install your properly configured package:



From friedrij at berlios.de  Thu Feb 16 10:06:48 2006
From: friedrij at berlios.de (friedrij at BerliOS)
Date: Thu, 16 Feb 2006 10:06:48 +0100
Subject: [vidprofile-svn] r43 - in trunk: . doc src
Message-ID: <200602160906.k1G96mwe004297@sheep.berlios.de>

Author: friedrij
Date: 2006-02-16 10:06:47 +0100 (Thu, 16 Feb 2006)
New Revision: 43

Added:
   trunk/src/lib-vidprofile.in
   trunk/src/profile
   trunk/src/psnrcore
   trunk/src/vidpsnr
Removed:
   trunk/doc/Makefile.am
   trunk/src/Makefile.am
   trunk/src/lib-vidprofile.sh.in
   trunk/src/profile.sh
   trunk/src/psnrcore.sh
   trunk/src/vidpsnr.sh
Modified:
   trunk/Makefile.am
   trunk/bootstrap
   trunk/configure.ac
Log:
autotools now flat, no more building

Modified: trunk/Makefile.am
===================================================================
--- trunk/Makefile.am	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/Makefile.am	2006-02-16 09:06:47 UTC (rev 43)
@@ -17,6 +17,21 @@
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
-SUBDIRS = doc src
+bin_SCRIPTS = \
+    src/lib-vidprofile \
+    src/profile \
+    src/psnrcore \
+    src/vidpsnr
 
-EXTRA_DIST = bootstrap
+man1_MANS = \
+    doc/profile.man \
+    doc/psnrcore.man \
+    doc/vidpsnr.man
+    
+EXTRA_DIST = \
+    $(bin_SCRIPTS) \
+    $(man1_MANS)
+
+# src/lib-vidprofile not needed b/c ./configure derives it from src/lib-vidprofile.in
+dist-hook:
+	rm -rvf $(top_distdir)/src/lib-vidprofile

Modified: trunk/bootstrap
===================================================================
--- trunk/bootstrap	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/bootstrap	2006-02-16 09:06:47 UTC (rev 43)
@@ -28,8 +28,6 @@
 rm -rvf "autom4te.cache"
 rm -rvf aclocal.m4 config.log config.status configure \
         Makefile Makefile.in
-rm -rvf src/Makefile src/Makefile.in
-rm -rvf doc/Makefile doc/Makefile.in
 
 aclocal \
 && automake --gnu --add-missing \
@@ -37,4 +35,4 @@
 
 echo
 echo "Done. Type './configure && su -c \"make install\"' to install."
-echo
\ No newline at end of file
+echo

Modified: trunk/configure.ac
===================================================================
--- trunk/configure.ac	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/configure.ac	2006-02-16 09:06:47 UTC (rev 43)
@@ -34,7 +34,7 @@
 #                         the version number is also substituted into 
 #                         lib-vidprofile.sh.in
 AC_INIT([vidprofile], [svn])
-AC_CONFIG_SRCDIR([src/profile.sh])
+AC_CONFIG_SRCDIR([src/profile])
 
 AM_INIT_AUTOMAKE
 
@@ -176,7 +176,7 @@
 # be replaced with VALUE
 AC_SUBST(BUILD_OPTS)
 
-AC_CONFIG_FILES([Makefile src/Makefile doc/Makefile src/lib-vidprofile.sh])
+AC_CONFIG_FILES([Makefile src/lib-vidprofile])
 AC_OUTPUT
 
 # ******************************************************************************
@@ -198,4 +198,4 @@
 
 $OPT_DEP_MSG
   $INSTALL_MSG
-])
\ No newline at end of file
+])

Deleted: trunk/doc/Makefile.am
===================================================================
--- trunk/doc/Makefile.am	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/doc/Makefile.am	2006-02-16 09:06:47 UTC (rev 43)
@@ -1,25 +0,0 @@
-# Process this file with automake to produce a Makefile.in
-
-# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
-# 
-# This program is free software; you can redistribute it and/or 
-# modify it under the terms of the GNU General Public License 
-# as published by the Free Software Foundation; either 
-# version 2 of the License, or (at your option) any later 
-# version.
-# 
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-
-man1_MANS = \
-    profile.man \
-    psnrcore.man \
-    vidpsnr.man
-    
-EXTRA_DIST = $(man1_MANS)

Deleted: trunk/src/Makefile.am
===================================================================
--- trunk/src/Makefile.am	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/src/Makefile.am	2006-02-16 09:06:47 UTC (rev 43)
@@ -1,58 +0,0 @@
-# Process this file with automake to produce a Makefile.in
-
-# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
-# 
-# This program is free software; you can redistribute it and/or 
-# modify it under the terms of the GNU General Public License 
-# as published by the Free Software Foundation; either 
-# version 2 of the License, or (at your option) any later 
-# version.
-# 
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-
-# List the source files for each shell script to be built and 
-# installed. Correct names are automatically created for the 
-# build process, as well as install directives.
-
-sh_source = \
-    lib-vidprofile.sh \
-    profile.sh \
-    psnrcore.sh \
-    vidpsnr.sh
-
-################### LEAVE BELOW ALONE #########################
-
-# No need to modify anything below! The above list can 
-# handle an arbitrary amount of shell scripts.
-# Everything is correctly built, installed, and cleaned so long
-# as the source files have a .sh suffix for shell scripts.
-
-# Strip the source file extentions. A built file will be called
-# by the basename of its source.
-#   eg: profile.sh becomes made and installed as profile
-sh_bin = $(basename $(sh_source))
-
-# Specify the scripts to make and install.
-bin_SCRIPTS = $(sh_bin)
-
-# Clean the built scripts only. Leave the source files alone.
-CLEANFILES = $(bin_SCRIPTS)
-
-# Distribute the source files so the suite can be built!
-EXTRA_DIST = $(sh_source)
-
-# Make all the shell scripts.
-# These are Static Pattern Rules, found at:
-# http://www.gnu.org/software/make/manual/html_mono/make.html#SEC47
-$(sh_bin): %: %.sh
-	rm -f "$@"
-	echo "#! `command -v sh`"  > $@
-	cat $(srcdir)/$< >> $@
-	chmod ugo+x $@

Copied: trunk/src/lib-vidprofile.in (from rev 41, trunk/src/lib-vidprofile.sh.in)
===================================================================
--- trunk/src/lib-vidprofile.sh.in	2006-02-01 12:41:49 UTC (rev 41)
+++ trunk/src/lib-vidprofile.in	2006-02-16 09:06:47 UTC (rev 43)
@@ -0,0 +1,154 @@
+#! /bin/sh
+ 
+# vidprofile suite
+# A set of scripts that profile a given input video with mpeg2enc. Multiple 
+# tests are run with different encoder flags and statistics on output file 
+# size and encoding times are taken.
+#
+# Command line options allow the output files to be kept or a specific
+# frame to be captured from the output files, or both! Also, the Peak
+# Signal to Noise Ratio may be calculated. 
+#
+# Please see the discussion on the tovid forums for further details:
+# http://www.createphpbb.com/phpbb/viewtopic.php?p=462&mforum=tovid#462
+
+# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
+# Original script pieces by Eric Pierce.
+# Modified on 2005 September 23.
+# 
+# This program is free software; you can redistribute it and/or 
+# modify it under the terms of the GNU General Public License 
+# as published by the Free Software Foundation; either 
+# version 2 of the License, or (at your option) any later 
+# version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ 
+ 
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# CONSTANTS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+ 
+VIDPROFILE_VERSION="@VERSION@"
+BUILD_OPTS="@BUILD_OPTS@"
+
+VIDPROFILE_HOME="$HOME/.vidprofile"
+
+
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# FUNCTIONS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+# ******************************************************************************
+# Print error message, then exit.
+# Args: $@ == text string containing error message 
+# ******************************************************************************
+exit_with_error()
+{
+  echo
+  precho "$@"
+  precho "Exiting..."
+  echo
+  exit 1
+}
+
+# ******************************************************************************
+# Print a pretty (wrapped) notice message.
+# Args: $@ == text string containing the message 
+# ******************************************************************************
+precho()
+{
+  echo -e "$@" | fold -s -w ${COLUMNS:-80}
+}
+
+# ******************************************************************************
+# Determine if a vidprofile has support for a dependency, exit on failure
+# Args: $1 = dependency to check (listed in $BUILD_OPTS)
+#       $2 = command line flag that requires the dependency
+# ******************************************************************************
+check_optional_dependency()
+{
+  if echo "$BUILD_OPTS" | grep "$1" >> /dev/null 2>&1; then :
+  else
+     exit_with_error "Not suported! \"$2\" requires \"$1\". Install $1 and recompile."
+  fi
+}
+
+# ******************************************************************************
+# Create the home directory for vidprofile
+# Args:
+# ******************************************************************************
+make_home()
+{
+  if test -d "$VIDPROFILE_HOME"; then :
+  else
+    mkdir "$VIDPROFILE_HOME"
+  fi
+}
+
+# ******************************************************************************
+# Verify that a variable meets certain conditions
+# Usage: verify $VAR set|range "test limits"
+# Input: $1 = the variable to check
+#        $2 = the kind of test to perform (set|range)
+#             set: test if $VAR is in the space-separated set "test limits"
+#             range: test if $VAR is in the range given by "test limits"
+#        $3 = the limits for the test
+#
+# ex: verify $CMD_LN_OPT set "y n Y N"
+#     will return ":" (true) if $CMD_LN_OPT is one of "y n Y N"
+#     or retern "false" if it isn't (so if $CMD_LN_OPT was "no", you'd get "false")
+#
+# ex: verify $CMD_LN_OPT range "0 10"
+#     will return ":" (true) if 0 <= $CMD_LN_OPT <= 10
+# ******************************************************************************
+verify ()
+{
+  VERIFY_VAR=$1
+  VERIFY_TEST_TYPE=$2
+  case $VERIFY_TEST_TYPE in
+     "range" )
+     VERIFY_LOW=`echo "$3" | awk '{ print $1 }'`
+     VERIFY_HIGH=`echo "$3" | awk '{ print $2 }'`
+
+     if test $VERIFY_LOW -le $VERIFY_VAR && \
+        test $VERIFY_HIGH -ge $VERIFY_VAR
+     then
+        echo ":"
+     else
+        echo "false"
+     fi 
+     ;;
+
+     "set" )
+     VERIFY_SET="$3"
+
+     if echo "$VERIFY_SET" | grep "$VERIFY_VAR" >> /dev/null 2>&1; then
+         echo ":"
+     else
+         echo "false"
+     fi
+     ;;
+  esac
+}

Deleted: trunk/src/lib-vidprofile.sh.in
===================================================================
--- trunk/src/lib-vidprofile.sh.in	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/src/lib-vidprofile.sh.in	2006-02-16 09:06:47 UTC (rev 43)
@@ -1,154 +0,0 @@
-# -* sh *-
- 
-# vidprofile suite
-# A set of scripts that profile a given input video with mpeg2enc. Multiple 
-# tests are run with different encoder flags and statistics on output file 
-# size and encoding times are taken.
-#
-# Command line options allow the output files to be kept or a specific
-# frame to be captured from the output files, or both! Also, the Peak
-# Signal to Noise Ratio may be calculated. 
-#
-# Please see the discussion on the tovid forums for further details:
-# http://www.createphpbb.com/phpbb/viewtopic.php?p=462&mforum=tovid#462
-
-# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
-# Original script pieces by Eric Pierce.
-# Modified on 2005 September 23.
-# 
-# This program is free software; you can redistribute it and/or 
-# modify it under the terms of the GNU General Public License 
-# as published by the Free Software Foundation; either 
-# version 2 of the License, or (at your option) any later 
-# version.
-# 
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
- 
- 
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# CONSTANTS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
- 
-VIDPROFILE_VERSION="@VERSION@"
-BUILD_OPTS="@BUILD_OPTS@"
-
-VIDPROFILE_HOME="$HOME/.vidprofile"
-
-
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# FUNCTIONS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-# ******************************************************************************
-# Print error message, then exit.
-# Args: $@ == text string containing error message 
-# ******************************************************************************
-exit_with_error()
-{
-  echo
-  precho "$@"
-  precho "Exiting..."
-  echo
-  exit 1
-}
-
-# ******************************************************************************
-# Print a pretty (wrapped) notice message.
-# Args: $@ == text string containing the message 
-# ******************************************************************************
-precho()
-{
-  echo -e "$@" | fold -s -w ${COLUMNS:-80}
-}
-
-# ******************************************************************************
-# Determine if a vidprofile has support for a dependency, exit on failure
-# Args: $1 = dependency to check (listed in $BUILD_OPTS)
-#       $2 = command line flag that requires the dependency
-# ******************************************************************************
-check_optional_dependency()
-{
-  if echo "$BUILD_OPTS" | grep "$1" >> /dev/null 2>&1; then :
-  else
-     exit_with_error "Not suported! \"$2\" requires \"$1\". Install $1 and recompile."
-  fi
-}
-
-# ******************************************************************************
-# Create the home directory for vidprofile
-# Args:
-# ******************************************************************************
-make_home()
-{
-  if test -d "$VIDPROFILE_HOME"; then :
-  else
-    mkdir "$VIDPROFILE_HOME"
-  fi
-}
-
-# ******************************************************************************
-# Verify that a variable meets certain conditions
-# Usage: verify $VAR set|range "test limits"
-# Input: $1 = the variable to check
-#        $2 = the kind of test to perform (set|range)
-#             set: test if $VAR is in the space-separated set "test limits"
-#             range: test if $VAR is in the range given by "test limits"
-#        $3 = the limits for the test
-#
-# ex: verify $CMD_LN_OPT set "y n Y N"
-#     will return ":" (true) if $CMD_LN_OPT is one of "y n Y N"
-#     or retern "false" if it isn't (so if $CMD_LN_OPT was "no", you'd get "false")
-#
-# ex: verify $CMD_LN_OPT range "0 10"
-#     will return ":" (true) if 0 <= $CMD_LN_OPT <= 10
-# ******************************************************************************
-verify ()
-{
-  VERIFY_VAR=$1
-  VERIFY_TEST_TYPE=$2
-  case $VERIFY_TEST_TYPE in
-     "range" )
-     VERIFY_LOW=`echo "$3" | awk '{ print $1 }'`
-     VERIFY_HIGH=`echo "$3" | awk '{ print $2 }'`
-
-     if test $VERIFY_LOW -le $VERIFY_VAR && \
-        test $VERIFY_HIGH -ge $VERIFY_VAR
-     then
-        echo ":"
-     else
-        echo "false"
-     fi 
-     ;;
-
-     "set" )
-     VERIFY_SET="$3"
-
-     if echo "$VERIFY_SET" | grep "$VERIFY_VAR" >> /dev/null 2>&1; then
-         echo ":"
-     else
-         echo "false"
-     fi
-     ;;
-  esac
-}

Copied: trunk/src/profile (from rev 14, trunk/src/profile.sh)
===================================================================
--- trunk/src/profile.sh	2005-12-06 09:47:44 UTC (rev 14)
+++ trunk/src/profile	2006-02-16 09:06:47 UTC (rev 43)
@@ -0,0 +1,841 @@
+#! /bin/sh
+. lib-vidprofile
+ 
+# profile
+# A script that profiles a given input video with mpeg2enc. Multiple tests
+# are run with different encoder flags and statistics on output file size 
+# and encoding times are taken.
+#
+# Command line options allow the output files to be kept or a specific
+# frame to be captured from the output files, or both! Also, the Peak
+# Signal to Noise Ratio may be calculated. 
+#
+# Please see the discussion on the tovid forums for further details:
+# http://www.createphpbb.com/phpbb/viewtopic.php?p=462&mforum=tovid#462
+#
+# Usage:
+#
+# $ profile -f video.avi
+#
+# Pass profile a video file, and go get some coffee (and maybe a good book).
+#
+# TO-DO:
+# (1) Adapt for long movies: allow inpoints and outpoints
+
+# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
+# Original script pieces by Eric Pierce.
+# Modified on 2005 September 23.
+# 
+# This program is free software; you can redistribute it and/or 
+# modify it under the terms of the GNU General Public License 
+# as published by the Free Software Foundation; either 
+# version 2 of the License, or (at your option) any later 
+# version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ 
+ 
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# CONSTANTS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+ 
+# Base mpeg2enc format: 4:3 29.97fps NTSC DVD
+MP2_FIXED="-a 2 -n n -f 8 -F 4"
+ 
+MPLAYER_OPTS="-benchmark -nosound -noframedrop -noautosub -vf scale=720:480"
+ 
+# A counter for data points collected during the test. Initialize.
+DATA_POINTS=0
+
+# Flags for data processing the control test (see post_test)
+VARIABLE_TEST=0
+CONTROL_TEST=1
+
+# Count how many times the control test has happened
+CONTROL_ITER=0
+
+# List of PIDS to kill on exit
+PIDS=""
+
+# Number of fields in test specifications
+FLAG_LENGTH=1
+SINGLE_LENGTH=4
+DUAL_LENGTH=8
+
+USAGE=`cat << EOF
+
+profile $VIDPROFILE_VERSION (build options: $BUILD_OPTS)
+
+Usage: profile [OPTIONS] -f /path/to/video.avi
+
+  -f, -file /path/to/video.avi        video to profile
+  -l, -logfile /path/to/logfile.csv   where to put the data log
+  -el, -errlog /path/to/error.log     where to put the error log
+  -nl, -enclog /path/to/encoder.log   where to put the encoding log
+  -pl, -psnrlog /path/to/psnr.csv     where to put the PSNR log
+  -t, -test "TEST"                    run TEST
+  -t, -test "TEST 1:TEST 2:TEST 3"    run TEST 1, TEST 2, TEST 3
+      "-FLAG"                         test an mpeg2enc flag
+      "-OPTION MIN MAX STEP"          test numerical options
+      "-OPT1 MIN1 MAX1 STEP1 -OPT2 MIN2 MAX2 STEP2"
+   -c, -config /path/to/config.file   use a custom config file
+   -k, -keepvids                      keep encoded videos
+   -nf, -encframe NUMBER              only encode to frame NUMBER
+   -p, -psnr NUMBER|all               find the PSNR for NUMBER|all frames
+   -s, -snapshot NUMBER               take a snaphot of frame NUMBER
+   -h, -help                          display help and exit
+   -v, -version                       print version and exit
+ 
+See also
+  man profile
+  
+EOF`
+
+
+ 
+ 
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# DEFAULTS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+ 
+PROFILE_HOME=$VIDPROFILE_HOME
+
+# Logs
+LOGFILE=$PROFILE_HOME/profile.csv         # Data
+ERROR_LOG=/dev/null                       # Errors for short processes (mv, rm ...)
+ENC_LOG=/dev/null                         # mplayer and mpeg2enc output (very long!)
+PSNR_FRAME_LOG=$PROFILE_HOME/psnr.csv     # pnmpsnr output (long)
+
+# Not reading a config file yet
+# The default config file is read every time
+READING_CONFIG=false
+CONFIG_FILE="$PROFILE_HOME/profile.conf"
+
+# No tests to run
+# Individual tests are separated by colons (:)
+TEST_LIST=""
+ 
+# How many frames should mplayer send to mpeg2enc?
+# To encode the entire input file, comment these lines, or set the the number of
+# frames to more than the frames in the input file.
+# 450 frames play just longer than 15sec (NTSC) or 18sec (PAL)
+LAST_FRAME=""
+MPLAYER_FRAMES=""
+
+# Keep the movies mpeg2enc creates? [:|false]
+# The script leaves the movies in the same directory from which it was called.
+KEEP_OUTFILES=false
+ 
+# Take a frame from each test? [:|false]
+# If so, which one? (be sure it's less than either the number of frames mplayer sends
+#   to mpeg2enc, above, or the amount of frames in the entire input file).
+# The script leaves the snapshots in the same directory from which it was called.
+TAKE_SNAP=false
+SNAP_FRAME=""
+
+# Find the Peak Signal to Noise Ratio? [:|false]
+# If so, where should frames (in ppm format) be dropped? (they will be removed at the end)
+#        where should the frame-by-frame PSNR log be dropped?
+#        how many frames should be compared? (comment for all. NOTE: each frame is about 1MB)
+FIND_PSNR=false
+PSNR_CONT_DIR=/tmp/psnr-control
+PSNR_COMP_DIR=/tmp/psnr-compare
+PSNR_FRAMES=""
+PSNR_MPLAY_FRAMES=""
+
+# Set-up mplayer output format for PSNR
+CONT_PNM="pnm:outdir=$PSNR_CONT_DIR"
+COMP_PNM="pnm:outdir=$PSNR_COMP_DIR"
+ 
+ 
+ 
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# FUNCTIONS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+# Trap Ctrl-C and TERM to clean up child processes
+trap 'killsubprocs; exit 13' TERM INT
+ 
+# ******************************************************************************
+# Kill child processes
+# ******************************************************************************
+killsubprocs()
+{
+  echo
+  precho "Profile stopped, killing all sub-processes"
+  eval "kill $PIDS"
+  rm_output
+  clean_up
+}    
+
+# ******************************************************************************
+# Read all command-line arguments, and read any arguments included in the
+# default configuration file (if it exists)
+# ******************************************************************************
+get_args()
+{
+  # Parse all arguments
+  while test $# -gt 0; do
+      case "$1" in
+          "-v" | "-version" )
+              precho "profile $VIDPROFILE_VERSION (build options: $BUILD_OPTS)"
+              exit 0
+              ;;
+      
+          # Use custom config file?
+          "-c" | "-config" )
+              # Read in name of config file
+              shift
+              CONFIG_FILE="$1"
+              echo
+              precho "Overriding default configuration file (if it exists)."
+              read_config
+              ;;
+          
+          # Main data log file
+          "-l" | "-logfile" )
+              shift
+              LOGFILE="$1"
+              ;;
+          
+          # Error log file
+          "-el" | "-errlog" )
+              shift
+              ERROR_LOG="$1"
+              ;;
+                
+          # Encoder log file
+          "-nl" | "-enclog" )
+              shift
+              ENC_LOG="$1"
+              ;;
+                
+          # Encode only the first N frames? How many?
+          "-nf" | "-encframe" )
+              shift
+              LAST_FRAME="$1"
+              MPLAYER_FRAMES="-frames $LAST_FRAME"
+              ;;
+
+          # Keep encoded videos?
+          "-k" | "-keepvids" )
+              KEEP_OUTFILES=:
+              ;;
+                
+          # Take a snapshot from each video? Which one?
+          "-s" | "-snapshot" )
+              shift
+              TAKE_SNAP=:
+              SNAP_FRAME="$1"
+              ;;
+                
+          # Find the PSNR? Use how many frames?
+          "-p" | "-psnr" )
+              check_optional_dependency "pnmpsnr" "-p"
+              shift
+              FIND_PSNR=:
+              PSNR_FRAMES="$1"
+              if test "x$PSNR_FRAMES" = "xall"; then
+                  PSNR_MPLAY_FRAMES=""
+              else
+                  PSNR_MPLAY_FRAMES="-frames $PSNR_FRAMES"
+              fi
+              ;;
+                
+          # PSNR log file
+          "-pl" | "-psnrlog" )
+              check_optional_dependency "pnmpsnr" "-pl"
+              shift
+              PSNR_FRAME_LOG="$1"
+              ;;
+              
+          # A profile test
+          "-t" | "-test" )
+              # Find which test has been given
+              shift
+              TEST_LIST="$TEST_LIST:$1"
+              ;;
+          
+          # Print usage guide
+          "-h" | "-help" )
+              precho -e "$USAGE"
+              exit 0
+              ;;
+            
+          "-f" | "-file" )
+              shift
+              # Get a full pathname for the infile
+              D=`dirname "$1"`
+              B=`basename "$1"`
+              INFILE="`cd \"$D\" && pwd || echo \"$D\"`/$B"
+              ;;
+ 
+          # Null option; ignored.
+          "-" )
+              ;;
+
+          # If the option wasn't recognized, exit with an error
+          * )
+              exit_with_error "Error: Unrecognized command-line option $1. (try -help)"
+              ;;
+          esac
+
+      # Get next argument
+      shift
+  done
+}
+
+# ******************************************************************************
+# Read the default configuration file
+# 
+# ******************************************************************************
+read_config()
+{
+  # check that a config file exists and is readable
+  if test -r "$CONFIG_FILE"; then
+     # Make sure file is a profile config file
+     CONFIG_TYPE=`head -n 1 "$CONFIG_FILE"`
+     if test x"$CONFIG_TYPE" != x"profile"; then
+        echo
+        precho "$CONFIG_FILE is not a valid profile configuration file. Skipping it."
+     else
+        READING_CONFIG=:
+        CONFIG_ARGS=`grep '^-' $CONFIG_FILE | tr '\n' ' '`
+        precho "Using config file $CONFIG_FILE, containing the following options:"
+        if test -n "$CONFIG_ARGS"; then
+           precho "$CONFIG_ARGS"
+           eval get_args "$CONFIG_ARGS"
+        else
+           precho "(none)"
+        fi
+     fi
+  fi
+}
+
+# ******************************************************************************
+# Validate input arguments
+# 
+# ******************************************************************************
+check_input()
+{
+  # Make sure profile can take a snapshot and find the PSNR
+
+  # Does the input file exist?
+  if test -e "$INFILE"; then :
+     else exit_with_error "Error: could not find infile \"$INFILE\""; fi
+    
+  # If taking a snapshot ($SNAP_FRAME has been set)
+  if test x$SNAP_FRAME != x; then
+     # Give a warning if an encoding limit hasn't been given.
+     if test -z $LAST_FRAME; then
+        echo
+        precho "Warning: Taking a snapshot of frame $SNAP_FRAME when no explicit encode frame limit (-nf NUMBER; refer to \"profile -h\") is given. If `basename \"$INFILE\"` has less than $SNAP_FRAME frames, then this will fail."
+        echo
+     # Else report an error if the snapshot frame is greater than the encode frame limit.
+     else
+        if test $SNAP_FRAME -gt $LAST_FRAME; then
+           exit_with_error "Error: cannot take a snapshot of frame $SNAP_FRAME, only $LAST_FRAME frames will be encoded."
+        fi
+     fi
+  fi
+  
+  # If finding the PSNR (but not using all frames), give a warning if the
+  # PSNR frames are greater than the encoded frame limit.
+  if test x$PSNR_FRAMES != x && test x$PSNR_FRAMES != xall && \
+     test x$LAST_FRAME != x && \
+     test $PSNR_FRAMES -gt $LAST_FRAME; then
+        echo
+        precho "Warning: The given number of frames for the PSNR calculation ($PSNR_FRAMES) is more than the number of frames that will be encoded ($LAST_FRAME). The entire video will be used to find the PSNR."
+        echo
+  fi
+    
+  # Minimal test specification check: is the length ok?
+  #                                   does the test start with -?
+  # Whether or not an option takes a numerical argument is not checked.
+  #   eg -H 0 5 1 would break profile (-H is a flag!)
+  # Whether or not a range with a decimal point is consistent is not checked.
+  #   eg -N 0 2 0.1 would break profile (needs to be -N 0.0 2.0 0.1)
+  i=2
+  while test $i -le `echo "$TEST_LIST" | awk -F ':' '{ print NF }'`; do
+     TEST=`echo $TEST_LIST | awk -F ':' "{ print $"$i" }"`
+     TEST_TYPE=`echo "$TEST" | awk '{ print NF }'`
+     if test $TEST_TYPE -ne $FLAG_LENGTH && \
+        test $TEST_TYPE -ne $SINGLE_LENGTH && \
+        test $TEST_TYPE -ne $DUAL_LENGTH || \
+        ! echo "$TEST" | grep ^- >> /dev/null 2>> $ERROR_LOG
+     then exit_with_error "Error: Unrecognized test $TEST. (try -help)" 
+     fi
+     i=`expr $i + 1`
+  done
+}
+
+# ******************************************************************************
+# Set up the profile
+# 
+# ******************************************************************************
+set_up()
+{
+  SCRIPT_START=`date +%c`
+ 
+  # Gather input video file information
+  FILE_ID=`md5sum $INFILE`
+    
+  VID_SPECS=`mplayer -vo null -ao null -frames 1 -identify "$INFILE" 2>>$ERROR_LOG | grep -A 20 ID_FILENAME`     
+    
+  # Find the length of the video to test    
+  if test -z $LAST_FRAME; then
+     DURATION=`echo "$VID_SPECS" | grep "LENGTH" | awk -F '=' '{ print $2 }'`
+  else
+     FPS=`echo "$VID_SPECS" | grep "FPS" | awk -F '=' '{ print $2 }'`
+     DURATION=`echo "scale=2; $LAST_FRAME/$FPS" | bc -l`
+  fi
+    
+  snap_shot "$INFILE"
+    
+  echo
+  precho "md5sum:            $FILE_ID"
+  precho "Video Duration:    $DURATION sec"
+  precho "mpeg2enc baseline: $MP2_FIXED"
+  echo
+    
+  # Put a new header in the data log
+  touch "$LOGFILE"
+  echo "\"Profile time:\",       \"$SCRIPT_START\""  >> "$LOGFILE"
+  echo "\"md5sum:\",             \"$FILE_ID\"" >> "$LOGFILE"
+  echo "\"Test baseline:\",      \"mpeg2enc $MP2_FIXED\"" >> "$LOGFILE"
+  echo  >> "$LOGFILE"
+  echo "\"Profile Parameters:\"" >> "$LOGFILE"
+    
+  i=2
+  while test $i -le `echo "$TEST_LIST" | awk -F ':' '{ print NF }'`; do
+     TEST=`echo $TEST_LIST | awk -F ':' "{ print $"$i" }"`
+     echo "                    \"$TEST\"" >> "$LOGFILE"
+     i=`expr $i + 1`
+  done
+  echo >> "$LOGFILE"
+            
+  # Logfile headers for data columns
+  echo "\"Option 1\", \"Option 1 Value\", \"Option 2\", \"Option 2 Value\", \"Video Duration (s)\", \"Encoding time (s)\", \"Output size (kB)\", \"Time Multiplier\", \"Output Bitrate (kbps)\", \"Normalized Time (%)\", \"Normalized Bitrate (%)\", \"PSNR (dB)\"" >> "$LOGFILE"
+    
+  # Put a new header in the error log
+  touch "$ERROR_LOG"
+  echo "Profile time:       $SCRIPT_START"  >> "$ERROR_LOG"
+  echo "md5sum:             $FILE_ID" >> "$ERROR_LOG"
+  echo "Test baseline:      mpeg2enc $MP2_FIXED" >> "$ERROR_LOG"
+  echo  >> "$ERROR_LOG"  
+    
+  # Put a new header in the encoding log
+  touch "$ENC_LOG"
+  echo "Profile time:       $SCRIPT_START"  >> "$ENC_LOG"
+  echo "md5sum:             $FILE_ID" >> "$ENC_LOG"
+  echo "Test baseline:      mpeg2enc $MP2_FIXED" >> "$ENC_LOG"
+  echo  >> "$ENC_LOG"  
+    
+  # Prepare for PSNR
+  if $FIND_PSNR; then
+     mkdir $PSNR_CONT_DIR
+     mkdir $PSNR_COMP_DIR
+
+     mplayer $MPLAYER_OPTS $PSNR_MPLAY_FRAMES -vo $CONT_PNM "$INFILE" >> "$ENC_LOG" 2>&1
+
+     # Put a new header in the psnr log
+     touch "$PSNR_FRAME_LOG"
+     echo "\"Profile time:\",       \"$SCRIPT_START\""  >> "$PSNR_FRAME_LOG"
+     echo "\"md5sum:\",             \"$FILE_ID\"" >> "$PSNR_FRAME_LOG"
+     echo "\"Test baseline:\",      \"mpeg2enc $MP2_FIXED\"" >> "$PSNR_FRAME_LOG"
+     echo  >> "$PSNR_FRAME_LOG"  
+  fi
+}
+ 
+# ******************************************************************************
+# Run the control test, only the base parameters
+# Args: $1 is the unique output file name identifier for the control file
+# ******************************************************************************
+control()
+{
+  CONTROL_ID="$1"
+  CONTROL_ITER=`expr $CONTROL_ITER + 1`
+ 
+  pre_test
+    
+  OUTFILE="control_${CONTROL_ID}"
+  CMD="$MP2_FIXED -o $OUTFILE.mpg"
+  
+  encode
+  post_test  
+  CONTROL_PSNR=`calc_psnr`
+  snap_shot "$OUTFILE.mpg"
+  rm_output
+  
+  echo "\"CONTROL $CONTROL_ITER\", \"CONTROL $CONTROL_ITER\", \"CONTROL $CONTROL_ITER\", \"CONTROL $CONTROL_ITER\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$CONTROL_PSNR\"" >> "$LOGFILE"
+}
+ 
+# ******************************************************************************
+# Run a test on an option that takes an integer value
+# Args: $1 $2 $3 $4 = [option] [min] [max] [step]
+# ******************************************************************************
+range_test()
+{
+  TEST_OPT=$1
+  VAR=$2
+  TEST_MAX=$3
+  STEP=$4
+ 
+  while :
+  do
+    pre_test
+    
+    OUTFILE="profile_${TEST_OPT}_${VAR}"
+    CMD="$MP2_FIXED $TEST_OPT $VAR -o $OUTFILE.mpg"
+    
+    encode
+    post_test
+    PSNR=`calc_psnr`
+    snap_shot "$OUTFILE.mpg"
+    rm_output
+ 
+    echo "\"null\", \"null\", \"$TEST_OPT\", \"$VAR\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
+    
+    if test $VAR = $TEST_MAX; then break; fi
+
+    VAR=`echo "$VAR + $STEP" | bc -l`
+  done
+}
+ 
+# ******************************************************************************
+# Run a test on two options that take integer values
+# Args: $1 $2 $3 $4 \ = [option1] [min1] [max1] [step1] \
+#       $5 $6 $7 $8   = [option2] [min2] [max2] [step2]
+# ******************************************************************************
+dual_range()
+{
+  TEST_OPT1=$1
+  TEST_MIN1=$2
+  TEST_MAX1=$3
+  STEP1=$4
+  
+  TEST_OPT2=$5
+  TEST_MIN2=$6
+  TEST_MAX2=$7
+  STEP2=$8
+  
+  VAR1=$TEST_MIN1
+  VAR2=$TEST_MIN2
+  
+  while :
+  do
+    
+    while :
+    do
+      pre_test
+      
+      OUTFILE="profile_${TEST_OPT1}_${VAR1}_${TEST_OPT2}_${VAR2}"
+      CMD="$MP2_FIXED $TEST_OPT1 $VAR1 $TEST_OPT2 $VAR2 -o $OUTFILE.mpg"
+      
+      encode
+      post_test
+      PSNR=`calc_psnr`
+      snap_shot "$OUTFILE.mpg"
+      rm_output
+      
+      echo "\"$TEST_OPT1\", \"$VAR1\", \"$TEST_OPT2\", \"$VAR2\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
+     
+      if test $VAR2 = $TEST_MAX2; then break; fi
+      
+      VAR2=`echo "$VAR2 + $STEP2" | bc -l`
+    done
+      
+    VAR2=$TEST_MIN2
+    
+    if test $VAR1 = $TEST_MAX1; then break; fi
+    
+    VAR1=`echo "$VAR1 + $STEP1" | bc -l`
+  done
+}
+ 
+# ******************************************************************************
+# Run a test on an option that is only a flag (takes no value)
+# Args: $1 = [option]
+# ******************************************************************************
+flag_test()
+{
+  FLAG=$1
+ 
+  pre_test
+  
+  OUTFILE="profile_${FLAG}"
+  CMD="$MP2_FIXED $FLAG -o $OUTFILE.mpg"
+  
+  encode
+  post_test
+  PSNR=`calc_psnr`
+  snap_shot "$OUTFILE.mpg"
+  rm_output
+ 
+  echo "\"null\", \"null\", \"$FLAG\", \"null\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
+}
+ 
+# ******************************************************************************
+# Run a test on two options that take integer values, and where one option must
+# always be greater than or equal to the other
+# Args: $1 $2 $3 $4 \ = [option1] [min1] [max1] [step1] \
+#       $5 $6 $7 $8     [option2] [min2] [max2] [step2]
+# In this function, option1 >= option2 (G >= g).
+# ******************************************************************************
+G_g_test()
+{
+  TEST_OPT1=$1
+  TEST_MIN1=$2
+  TEST_MAX1=$3
+  STEP1=$4
+  
+  TEST_OPT2=$5
+  TEST_MIN2=$6
+  TEST_MAX2=$7
+  STEP2=$8
+  
+  VAR1=$TEST_MIN1
+  VAR2=$TEST_MIN2
+ 
+  while test $VAR1 -le $TEST_MAX1; do
+    
+    while test $VAR2 -le $VAR1; do
+      pre_test
+      
+      OUTFILE="profile_${TEST_OPT1}_${VAR1}_${TEST_OPT2}_${VAR2}"
+      CMD="$MP2_FIXED $TEST_OPT1 $VAR1 $TEST_OPT2 $VAR2 -o $OUTFILE.mpg"
+      
+      encode
+      post_test
+      PSNR=`calc_psnr`
+      snap_shot "$OUTFILE.mpg"
+      rm_output
+      
+      echo "\"$TEST_OPT1\", \"$VAR1\",  \"$TEST_OPT2\", \"$VAR2\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
+ 
+      VAR2=`expr $VAR2 + $STEP2`
+    done
+    
+    VAR2=$TEST_MIN2
+    VAR1=`expr $VAR1 + $STEP1`
+  done
+}
+ 
+# ******************************************************************************
+# Clean up the profile
+# 
+# ******************************************************************************
+clean_up()
+{
+  # Remove frames (and directories) if finding the PSNR
+  if $FIND_PSNR; then
+     rm -f $PSNR_CONT_DIR/*.ppm
+     rmdir $PSNR_CONT_DIR
+     rm -f $PSNR_COMP_DIR/*.ppm
+     rmdir $PSNR_COMP_DIR
+     
+     echo  >> "$PSNR_FRAME_LOG"  
+     echo  >> "$PSNR_FRAME_LOG"  
+  fi
+
+  rm -f stream.yuv
+  echo  >> "$LOGFILE"
+  echo  >> "$LOGFILE"
+  
+  echo  >> "$ERROR_LOG"
+  echo  >> "$ERROR_LOG"
+  
+  echo  >> "$ENC_LOG"
+  echo  >> "$ENC_LOG"
+}  
+  
+# ******************************************************************************
+# Print a summary of the profile
+# 
+# ******************************************************************************
+print_summary()
+{
+  SCRIPT_END=`date +%c`
+  echo
+  echo
+  precho "All finished profiling `basename \"$INFILE\"` with mpeg2enc."
+  precho "You have $DATA_POINTS new data points! (in $LOGFILE)"
+  if $KEEP_OUTFILES; then precho "And output movies! (in `pwd`)"; fi
+  if $TAKE_SNAP; then precho "And output stills! (in `pwd`)"; fi
+  precho "I started on       $SCRIPT_START"
+  precho "and finished on    $SCRIPT_END."
+  echo
+}
+ 
+# ******************************************************************************
+# Clean up before running an encoding test.
+# Make note of the start time.
+# ******************************************************************************
+pre_test()
+{
+  rm -f stream.yuv >> "$ERROR_LOG" 2>&1
+  mkfifo stream.yuv >> "$ERROR_LOG" 2>&1
+
+  START_TIME=`date +%s`
+}
+ 
+# ******************************************************************************
+# Encode the video.
+# 
+# ******************************************************************************
+encode()
+{
+  printf '%-80s\r' "Testing $CMD"
+  mplayer $MPLAYER_OPTS $MPLAYER_FRAMES -vo yuv4mpeg "$INFILE" >> "$ENC_LOG" 2>&1 &
+  PIDS="$PIDS $!"
+  cat stream.yuv | mpeg2enc $CMD >> "$ENC_LOG" 2>&1
+  wait
+}
+ 
+# ******************************************************************************
+# Clean up after running an encoding test.
+# Make note of the encoding time and output file's size.
+# ******************************************************************************
+post_test()
+{
+  # Prepare output stats for the log
+  END_TIME=`date +%s`
+  TOT_TIME=`echo "scale=2; $END_TIME-$START_TIME" | bc -l`
+  FINAL_SIZE=`du -k "$OUTFILE.mpg" | awk '{print $1}'`
+  TIME_MULT=`echo "scale=2; $TOT_TIME/$DURATION" | bc -l`
+  BITRATE=`echo "scale=0; 8*$FINAL_SIZE/$DURATION" | bc -l`
+  
+  # Things to do on first control test only:
+  # Find the base control figures (bitrate and encoding time)
+  if test $CONTROL_ITER -eq 1
+  then
+    CONT_TIME=$TOT_TIME
+    CONT_BITR=$BITRATE
+  fi    
+  
+  NORM_TIME=`echo "scale=2; ((100*$TOT_TIME/$CONT_TIME)-100)" | bc -l`
+  NORM_BITR=`echo "scale=2; ((100*$BITRATE/$CONT_BITR)-100)" | bc -l`
+  
+  DATA_POINTS=`expr $DATA_POINTS + 1`
+}
+ 
+# ******************************************************************************
+# Take a snapshot of a movie.
+# Args: $1 = file to take a snapshot of.
+# ******************************************************************************
+snap_shot()
+{
+  SNAPFILE="$1"
+  if $TAKE_SNAP; then
+     SSNAME=`basename $SNAPFILE`
+     mplayer $MPLAYER_OPTS -vo png -frames `expr $SNAP_FRAME + 1` "$SNAPFILE" >> "$ENC_LOG" 2>&1
+     sleep 2
+     mv 0*$SNAP_FRAME.png "frame-$SNAP_FRAME-$SSNAME.png" >> "$ERROR_LOG" 2>&1
+     rm -f 0*.png >> "$ERROR_LOG" 2>&1
+  fi
+}
+ 
+# ******************************************************************************
+# Find the Peak-Signal-to-Noise Ratio between the source video and the
+# endcoded video.
+# ******************************************************************************
+calc_psnr()
+{
+  if $FIND_PSNR; then
+     mplayer -nosound -benchmark -noframedrop -noautosub $PSNR_MPLAY_FRAMES -vo $COMP_PNM "$OUTFILE.mpg" >> "$ENC_LOG" 2>&1
+     echo "\"Finding PSNR between the source file and $OUTFILE.mpg\"" >> $PSNR_FRAME_LOG
+     echo "`psnrcore -o \"$PSNR_CONT_DIR\" -c \"$PSNR_COMP_DIR\" -l \"$PSNR_FRAME_LOG\"`"
+  else
+     echo "not measured"
+  fi
+}
+
+# ******************************************************************************
+# Clean up the encoded movie.
+# 
+# ******************************************************************************
+rm_output()
+{
+  if $KEEP_OUTFILES; then :
+  else
+      rm -f "$OUTFILE.mpg" >> "$ERROR_LOG" 2>&1
+  fi
+}
+ 
+ 
+ 
+ 
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# MAIN
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+make_home
+read_config 
+get_args "$@"
+
+check_input
+set_up
+control start
+
+# While there are tests to run, get the next test and determine which test to call
+i=2
+while test $i -le `echo "$TEST_LIST" | awk -F ':' '{ print NF }'`; do
+   TEST=`echo $TEST_LIST | awk -F ':' "{ print $"$i" }"`
+   TEST_TYPE=`echo "$TEST" | awk '{ print NF }'`
+   case "$TEST_TYPE" in
+        "$FLAG_LENGTH" )
+            flag_test $TEST
+            ;;
+        "$SINGLE_LENGTH" )
+            range_test $TEST
+            ;;
+        "$DUAL_LENGTH" )
+            if echo "$TEST" | awk '{ print $1 }' | grep '\-[gG]' >> /dev/null 2>&1 && \
+               echo "$TEST" | awk '{ print $5 }' | grep '\-[gG]' >> /dev/null 2>&1
+            then
+               G_g_test $TEST
+            else
+               dual_range $TEST
+            fi
+            ;;
+   esac
+   i=`expr $i + 1`
+done
+
+control end
+clean_up
+print_summary
+ 
+exit 0
\ No newline at end of file

Deleted: trunk/src/profile.sh
===================================================================
--- trunk/src/profile.sh	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/src/profile.sh	2006-02-16 09:06:47 UTC (rev 43)
@@ -1,841 +0,0 @@
-# -* sh *-
-. lib-vidprofile
- 
-# profile
-# A script that profiles a given input video with mpeg2enc. Multiple tests
-# are run with different encoder flags and statistics on output file size 
-# and encoding times are taken.
-#
-# Command line options allow the output files to be kept or a specific
-# frame to be captured from the output files, or both! Also, the Peak
-# Signal to Noise Ratio may be calculated. 
-#
-# Please see the discussion on the tovid forums for further details:
-# http://www.createphpbb.com/phpbb/viewtopic.php?p=462&mforum=tovid#462
-#
-# Usage:
-#
-# $ profile -f video.avi
-#
-# Pass profile a video file, and go get some coffee (and maybe a good book).
-#
-# TO-DO:
-# (1) Adapt for long movies: allow inpoints and outpoints
-
-# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
-# Original script pieces by Eric Pierce.
-# Modified on 2005 September 23.
-# 
-# This program is free software; you can redistribute it and/or 
-# modify it under the terms of the GNU General Public License 
-# as published by the Free Software Foundation; either 
-# version 2 of the License, or (at your option) any later 
-# version.
-# 
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
- 
- 
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# CONSTANTS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
- 
-# Base mpeg2enc format: 4:3 29.97fps NTSC DVD
-MP2_FIXED="-a 2 -n n -f 8 -F 4"
- 
-MPLAYER_OPTS="-benchmark -nosound -noframedrop -noautosub -vf scale=720:480"
- 
-# A counter for data points collected during the test. Initialize.
-DATA_POINTS=0
-
-# Flags for data processing the control test (see post_test)
-VARIABLE_TEST=0
-CONTROL_TEST=1
-
-# Count how many times the control test has happened
-CONTROL_ITER=0
-
-# List of PIDS to kill on exit
-PIDS=""
-
-# Number of fields in test specifications
-FLAG_LENGTH=1
-SINGLE_LENGTH=4
-DUAL_LENGTH=8
-
-USAGE=`cat << EOF
-
-profile $VIDPROFILE_VERSION (build options: $BUILD_OPTS)
-
-Usage: profile [OPTIONS] -f /path/to/video.avi
-
-  -f, -file /path/to/video.avi        video to profile
-  -l, -logfile /path/to/logfile.csv   where to put the data log
-  -el, -errlog /path/to/error.log     where to put the error log
-  -nl, -enclog /path/to/encoder.log   where to put the encoding log
-  -pl, -psnrlog /path/to/psnr.csv     where to put the PSNR log
-  -t, -test "TEST"                    run TEST
-  -t, -test "TEST 1:TEST 2:TEST 3"    run TEST 1, TEST 2, TEST 3
-      "-FLAG"                         test an mpeg2enc flag
-      "-OPTION MIN MAX STEP"          test numerical options
-      "-OPT1 MIN1 MAX1 STEP1 -OPT2 MIN2 MAX2 STEP2"
-   -c, -config /path/to/config.file   use a custom config file
-   -k, -keepvids                      keep encoded videos
-   -nf, -encframe NUMBER              only encode to frame NUMBER
-   -p, -psnr NUMBER|all               find the PSNR for NUMBER|all frames
-   -s, -snapshot NUMBER               take a snaphot of frame NUMBER
-   -h, -help                          display help and exit
-   -v, -version                       print version and exit
- 
-See also
-  man profile
-  
-EOF`
-
-
- 
- 
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# DEFAULTS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
- 
-PROFILE_HOME=$VIDPROFILE_HOME
-
-# Logs
-LOGFILE=$PROFILE_HOME/profile.csv         # Data
-ERROR_LOG=/dev/null                       # Errors for short processes (mv, rm ...)
-ENC_LOG=/dev/null                         # mplayer and mpeg2enc output (very long!)
-PSNR_FRAME_LOG=$PROFILE_HOME/psnr.csv     # pnmpsnr output (long)
-
-# Not reading a config file yet
-# The default config file is read every time
-READING_CONFIG=false
-CONFIG_FILE="$PROFILE_HOME/profile.conf"
-
-# No tests to run
-# Individual tests are separated by colons (:)
-TEST_LIST=""
- 
-# How many frames should mplayer send to mpeg2enc?
-# To encode the entire input file, comment these lines, or set the the number of
-# frames to more than the frames in the input file.
-# 450 frames play just longer than 15sec (NTSC) or 18sec (PAL)
-LAST_FRAME=""
-MPLAYER_FRAMES=""
-
-# Keep the movies mpeg2enc creates? [:|false]
-# The script leaves the movies in the same directory from which it was called.
-KEEP_OUTFILES=false
- 
-# Take a frame from each test? [:|false]
-# If so, which one? (be sure it's less than either the number of frames mplayer sends
-#   to mpeg2enc, above, or the amount of frames in the entire input file).
-# The script leaves the snapshots in the same directory from which it was called.
-TAKE_SNAP=false
-SNAP_FRAME=""
-
-# Find the Peak Signal to Noise Ratio? [:|false]
-# If so, where should frames (in ppm format) be dropped? (they will be removed at the end)
-#        where should the frame-by-frame PSNR log be dropped?
-#        how many frames should be compared? (comment for all. NOTE: each frame is about 1MB)
-FIND_PSNR=false
-PSNR_CONT_DIR=/tmp/psnr-control
-PSNR_COMP_DIR=/tmp/psnr-compare
-PSNR_FRAMES=""
-PSNR_MPLAY_FRAMES=""
-
-# Set-up mplayer output format for PSNR
-CONT_PNM="pnm:outdir=$PSNR_CONT_DIR"
-COMP_PNM="pnm:outdir=$PSNR_COMP_DIR"
- 
- 
- 
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# FUNCTIONS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-# Trap Ctrl-C and TERM to clean up child processes
-trap 'killsubprocs; exit 13' TERM INT
- 
-# ******************************************************************************
-# Kill child processes
-# ******************************************************************************
-killsubprocs()
-{
-  echo
-  precho "Profile stopped, killing all sub-processes"
-  eval "kill $PIDS"
-  rm_output
-  clean_up
-}    
-
-# ******************************************************************************
-# Read all command-line arguments, and read any arguments included in the
-# default configuration file (if it exists)
-# ******************************************************************************
-get_args()
-{
-  # Parse all arguments
-  while test $# -gt 0; do
-      case "$1" in
-          "-v" | "-version" )
-              precho "profile $VIDPROFILE_VERSION (build options: $BUILD_OPTS)"
-              exit 0
-              ;;
-      
-          # Use custom config file?
-          "-c" | "-config" )
-              # Read in name of config file
-              shift
-              CONFIG_FILE="$1"
-              echo
-              precho "Overriding default configuration file (if it exists)."
-              read_config
-              ;;
-          
-          # Main data log file
-          "-l" | "-logfile" )
-              shift
-              LOGFILE="$1"
-              ;;
-          
-          # Error log file
-          "-el" | "-errlog" )
-              shift
-              ERROR_LOG="$1"
-              ;;
-                
-          # Encoder log file
-          "-nl" | "-enclog" )
-              shift
-              ENC_LOG="$1"
-              ;;
-                
-          # Encode only the first N frames? How many?
-          "-nf" | "-encframe" )
-              shift
-              LAST_FRAME="$1"
-              MPLAYER_FRAMES="-frames $LAST_FRAME"
-              ;;
-
-          # Keep encoded videos?
-          "-k" | "-keepvids" )
-              KEEP_OUTFILES=:
-              ;;
-                
-          # Take a snapshot from each video? Which one?
-          "-s" | "-snapshot" )
-              shift
-              TAKE_SNAP=:
-              SNAP_FRAME="$1"
-              ;;
-                
-          # Find the PSNR? Use how many frames?
-          "-p" | "-psnr" )
-              check_optional_dependency "pnmpsnr" "-p"
-              shift
-              FIND_PSNR=:
-              PSNR_FRAMES="$1"
-              if test "x$PSNR_FRAMES" = "xall"; then
-                  PSNR_MPLAY_FRAMES=""
-              else
-                  PSNR_MPLAY_FRAMES="-frames $PSNR_FRAMES"
-              fi
-              ;;
-                
-          # PSNR log file
-          "-pl" | "-psnrlog" )
-              check_optional_dependency "pnmpsnr" "-pl"
-              shift
-              PSNR_FRAME_LOG="$1"
-              ;;
-              
-          # A profile test
-          "-t" | "-test" )
-              # Find which test has been given
-              shift
-              TEST_LIST="$TEST_LIST:$1"
-              ;;
-          
-          # Print usage guide
-          "-h" | "-help" )
-              precho -e "$USAGE"
-              exit 0
-              ;;
-            
-          "-f" | "-file" )
-              shift
-              # Get a full pathname for the infile
-              D=`dirname "$1"`
-              B=`basename "$1"`
-              INFILE="`cd \"$D\" && pwd || echo \"$D\"`/$B"
-              ;;
- 
-          # Null option; ignored.
-          "-" )
-              ;;
-
-          # If the option wasn't recognized, exit with an error
-          * )
-              exit_with_error "Error: Unrecognized command-line option $1. (try -help)"
-              ;;
-          esac
-
-      # Get next argument
-      shift
-  done
-}
-
-# ******************************************************************************
-# Read the default configuration file
-# 
-# ******************************************************************************
-read_config()
-{
-  # check that a config file exists and is readable
-  if test -r "$CONFIG_FILE"; then
-     # Make sure file is a profile config file
-     CONFIG_TYPE=`head -n 1 "$CONFIG_FILE"`
-     if test x"$CONFIG_TYPE" != x"profile"; then
-        echo
-        precho "$CONFIG_FILE is not a valid profile configuration file. Skipping it."
-     else
-        READING_CONFIG=:
-        CONFIG_ARGS=`grep '^-' $CONFIG_FILE | tr '\n' ' '`
-        precho "Using config file $CONFIG_FILE, containing the following options:"
-        if test -n "$CONFIG_ARGS"; then
-           precho "$CONFIG_ARGS"
-           eval get_args "$CONFIG_ARGS"
-        else
-           precho "(none)"
-        fi
-     fi
-  fi
-}
-
-# ******************************************************************************
-# Validate input arguments
-# 
-# ******************************************************************************
-check_input()
-{
-  # Make sure profile can take a snapshot and find the PSNR
-
-  # Does the input file exist?
-  if test -e "$INFILE"; then :
-     else exit_with_error "Error: could not find infile \"$INFILE\""; fi
-    
-  # If taking a snapshot ($SNAP_FRAME has been set)
-  if test x$SNAP_FRAME != x; then
-     # Give a warning if an encoding limit hasn't been given.
-     if test -z $LAST_FRAME; then
-        echo
-        precho "Warning: Taking a snapshot of frame $SNAP_FRAME when no explicit encode frame limit (-nf NUMBER; refer to \"profile -h\") is given. If `basename \"$INFILE\"` has less than $SNAP_FRAME frames, then this will fail."
-        echo
-     # Else report an error if the snapshot frame is greater than the encode frame limit.
-     else
-        if test $SNAP_FRAME -gt $LAST_FRAME; then
-           exit_with_error "Error: cannot take a snapshot of frame $SNAP_FRAME, only $LAST_FRAME frames will be encoded."
-        fi
-     fi
-  fi
-  
-  # If finding the PSNR (but not using all frames), give a warning if the
-  # PSNR frames are greater than the encoded frame limit.
-  if test x$PSNR_FRAMES != x && test x$PSNR_FRAMES != xall && \
-     test x$LAST_FRAME != x && \
-     test $PSNR_FRAMES -gt $LAST_FRAME; then
-        echo
-        precho "Warning: The given number of frames for the PSNR calculation ($PSNR_FRAMES) is more than the number of frames that will be encoded ($LAST_FRAME). The entire video will be used to find the PSNR."
-        echo
-  fi
-    
-  # Minimal test specification check: is the length ok?
-  #                                   does the test start with -?
-  # Whether or not an option takes a numerical argument is not checked.
-  #   eg -H 0 5 1 would break profile (-H is a flag!)
-  # Whether or not a range with a decimal point is consistent is not checked.
-  #   eg -N 0 2 0.1 would break profile (needs to be -N 0.0 2.0 0.1)
-  i=2
-  while test $i -le `echo "$TEST_LIST" | awk -F ':' '{ print NF }'`; do
-     TEST=`echo $TEST_LIST | awk -F ':' "{ print $"$i" }"`
-     TEST_TYPE=`echo "$TEST" | awk '{ print NF }'`
-     if test $TEST_TYPE -ne $FLAG_LENGTH && \
-        test $TEST_TYPE -ne $SINGLE_LENGTH && \
-        test $TEST_TYPE -ne $DUAL_LENGTH || \
-        ! echo "$TEST" | grep ^- >> /dev/null 2>> $ERROR_LOG
-     then exit_with_error "Error: Unrecognized test $TEST. (try -help)" 
-     fi
-     i=`expr $i + 1`
-  done
-}
-
-# ******************************************************************************
-# Set up the profile
-# 
-# ******************************************************************************
-set_up()
-{
-  SCRIPT_START=`date +%c`
- 
-  # Gather input video file information
-  FILE_ID=`md5sum $INFILE`
-    
-  VID_SPECS=`mplayer -vo null -ao null -frames 1 -identify "$INFILE" 2>>$ERROR_LOG | grep -A 20 ID_FILENAME`     
-    
-  # Find the length of the video to test    
-  if test -z $LAST_FRAME; then
-     DURATION=`echo "$VID_SPECS" | grep "LENGTH" | awk -F '=' '{ print $2 }'`
-  else
-     FPS=`echo "$VID_SPECS" | grep "FPS" | awk -F '=' '{ print $2 }'`
-     DURATION=`echo "scale=2; $LAST_FRAME/$FPS" | bc -l`
-  fi
-    
-  snap_shot "$INFILE"
-    
-  echo
-  precho "md5sum:            $FILE_ID"
-  precho "Video Duration:    $DURATION sec"
-  precho "mpeg2enc baseline: $MP2_FIXED"
-  echo
-    
-  # Put a new header in the data log
-  touch "$LOGFILE"
-  echo "\"Profile time:\",       \"$SCRIPT_START\""  >> "$LOGFILE"
-  echo "\"md5sum:\",             \"$FILE_ID\"" >> "$LOGFILE"
-  echo "\"Test baseline:\",      \"mpeg2enc $MP2_FIXED\"" >> "$LOGFILE"
-  echo  >> "$LOGFILE"
-  echo "\"Profile Parameters:\"" >> "$LOGFILE"
-    
-  i=2
-  while test $i -le `echo "$TEST_LIST" | awk -F ':' '{ print NF }'`; do
-     TEST=`echo $TEST_LIST | awk -F ':' "{ print $"$i" }"`
-     echo "                    \"$TEST\"" >> "$LOGFILE"
-     i=`expr $i + 1`
-  done
-  echo >> "$LOGFILE"
-            
-  # Logfile headers for data columns
-  echo "\"Option 1\", \"Option 1 Value\", \"Option 2\", \"Option 2 Value\", \"Video Duration (s)\", \"Encoding time (s)\", \"Output size (kB)\", \"Time Multiplier\", \"Output Bitrate (kbps)\", \"Normalized Time (%)\", \"Normalized Bitrate (%)\", \"PSNR (dB)\"" >> "$LOGFILE"
-    
-  # Put a new header in the error log
-  touch "$ERROR_LOG"
-  echo "Profile time:       $SCRIPT_START"  >> "$ERROR_LOG"
-  echo "md5sum:             $FILE_ID" >> "$ERROR_LOG"
-  echo "Test baseline:      mpeg2enc $MP2_FIXED" >> "$ERROR_LOG"
-  echo  >> "$ERROR_LOG"  
-    
-  # Put a new header in the encoding log
-  touch "$ENC_LOG"
-  echo "Profile time:       $SCRIPT_START"  >> "$ENC_LOG"
-  echo "md5sum:             $FILE_ID" >> "$ENC_LOG"
-  echo "Test baseline:      mpeg2enc $MP2_FIXED" >> "$ENC_LOG"
-  echo  >> "$ENC_LOG"  
-    
-  # Prepare for PSNR
-  if $FIND_PSNR; then
-     mkdir $PSNR_CONT_DIR
-     mkdir $PSNR_COMP_DIR
-
-     mplayer $MPLAYER_OPTS $PSNR_MPLAY_FRAMES -vo $CONT_PNM "$INFILE" >> "$ENC_LOG" 2>&1
-
-     # Put a new header in the psnr log
-     touch "$PSNR_FRAME_LOG"
-     echo "\"Profile time:\",       \"$SCRIPT_START\""  >> "$PSNR_FRAME_LOG"
-     echo "\"md5sum:\",             \"$FILE_ID\"" >> "$PSNR_FRAME_LOG"
-     echo "\"Test baseline:\",      \"mpeg2enc $MP2_FIXED\"" >> "$PSNR_FRAME_LOG"
-     echo  >> "$PSNR_FRAME_LOG"  
-  fi
-}
- 
-# ******************************************************************************
-# Run the control test, only the base parameters
-# Args: $1 is the unique output file name identifier for the control file
-# ******************************************************************************
-control()
-{
-  CONTROL_ID="$1"
-  CONTROL_ITER=`expr $CONTROL_ITER + 1`
- 
-  pre_test
-    
-  OUTFILE="control_${CONTROL_ID}"
-  CMD="$MP2_FIXED -o $OUTFILE.mpg"
-  
-  encode
-  post_test  
-  CONTROL_PSNR=`calc_psnr`
-  snap_shot "$OUTFILE.mpg"
-  rm_output
-  
-  echo "\"CONTROL $CONTROL_ITER\", \"CONTROL $CONTROL_ITER\", \"CONTROL $CONTROL_ITER\", \"CONTROL $CONTROL_ITER\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$CONTROL_PSNR\"" >> "$LOGFILE"
-}
- 
-# ******************************************************************************
-# Run a test on an option that takes an integer value
-# Args: $1 $2 $3 $4 = [option] [min] [max] [step]
-# ******************************************************************************
-range_test()
-{
-  TEST_OPT=$1
-  VAR=$2
-  TEST_MAX=$3
-  STEP=$4
- 
-  while :
-  do
-    pre_test
-    
-    OUTFILE="profile_${TEST_OPT}_${VAR}"
-    CMD="$MP2_FIXED $TEST_OPT $VAR -o $OUTFILE.mpg"
-    
-    encode
-    post_test
-    PSNR=`calc_psnr`
-    snap_shot "$OUTFILE.mpg"
-    rm_output
- 
-    echo "\"null\", \"null\", \"$TEST_OPT\", \"$VAR\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
-    
-    if test $VAR = $TEST_MAX; then break; fi
-
-    VAR=`echo "$VAR + $STEP" | bc -l`
-  done
-}
- 
-# ******************************************************************************
-# Run a test on two options that take integer values
-# Args: $1 $2 $3 $4 \ = [option1] [min1] [max1] [step1] \
-#       $5 $6 $7 $8   = [option2] [min2] [max2] [step2]
-# ******************************************************************************
-dual_range()
-{
-  TEST_OPT1=$1
-  TEST_MIN1=$2
-  TEST_MAX1=$3
-  STEP1=$4
-  
-  TEST_OPT2=$5
-  TEST_MIN2=$6
-  TEST_MAX2=$7
-  STEP2=$8
-  
-  VAR1=$TEST_MIN1
-  VAR2=$TEST_MIN2
-  
-  while :
-  do
-    
-    while :
-    do
-      pre_test
-      
-      OUTFILE="profile_${TEST_OPT1}_${VAR1}_${TEST_OPT2}_${VAR2}"
-      CMD="$MP2_FIXED $TEST_OPT1 $VAR1 $TEST_OPT2 $VAR2 -o $OUTFILE.mpg"
-      
-      encode
-      post_test
-      PSNR=`calc_psnr`
-      snap_shot "$OUTFILE.mpg"
-      rm_output
-      
-      echo "\"$TEST_OPT1\", \"$VAR1\", \"$TEST_OPT2\", \"$VAR2\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
-     
-      if test $VAR2 = $TEST_MAX2; then break; fi
-      
-      VAR2=`echo "$VAR2 + $STEP2" | bc -l`
-    done
-      
-    VAR2=$TEST_MIN2
-    
-    if test $VAR1 = $TEST_MAX1; then break; fi
-    
-    VAR1=`echo "$VAR1 + $STEP1" | bc -l`
-  done
-}
- 
-# ******************************************************************************
-# Run a test on an option that is only a flag (takes no value)
-# Args: $1 = [option]
-# ******************************************************************************
-flag_test()
-{
-  FLAG=$1
- 
-  pre_test
-  
-  OUTFILE="profile_${FLAG}"
-  CMD="$MP2_FIXED $FLAG -o $OUTFILE.mpg"
-  
-  encode
-  post_test
-  PSNR=`calc_psnr`
-  snap_shot "$OUTFILE.mpg"
-  rm_output
- 
-  echo "\"null\", \"null\", \"$FLAG\", \"null\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
-}
- 
-# ******************************************************************************
-# Run a test on two options that take integer values, and where one option must
-# always be greater than or equal to the other
-# Args: $1 $2 $3 $4 \ = [option1] [min1] [max1] [step1] \
-#       $5 $6 $7 $8     [option2] [min2] [max2] [step2]
-# In this function, option1 >= option2 (G >= g).
-# ******************************************************************************
-G_g_test()
-{
-  TEST_OPT1=$1
-  TEST_MIN1=$2
-  TEST_MAX1=$3
-  STEP1=$4
-  
-  TEST_OPT2=$5
-  TEST_MIN2=$6
-  TEST_MAX2=$7
-  STEP2=$8
-  
-  VAR1=$TEST_MIN1
-  VAR2=$TEST_MIN2
- 
-  while test $VAR1 -le $TEST_MAX1; do
-    
-    while test $VAR2 -le $VAR1; do
-      pre_test
-      
-      OUTFILE="profile_${TEST_OPT1}_${VAR1}_${TEST_OPT2}_${VAR2}"
-      CMD="$MP2_FIXED $TEST_OPT1 $VAR1 $TEST_OPT2 $VAR2 -o $OUTFILE.mpg"
-      
-      encode
-      post_test
-      PSNR=`calc_psnr`
-      snap_shot "$OUTFILE.mpg"
-      rm_output
-      
-      echo "\"$TEST_OPT1\", \"$VAR1\",  \"$TEST_OPT2\", \"$VAR2\", \"$DURATION\", \"$TOT_TIME\", \"$FINAL_SIZE\", \"$TIME_MULT\", \"$BITRATE\", \"$NORM_TIME\", \"$NORM_BITR\", \"$PSNR\"" >> "$LOGFILE"
- 
-      VAR2=`expr $VAR2 + $STEP2`
-    done
-    
-    VAR2=$TEST_MIN2
-    VAR1=`expr $VAR1 + $STEP1`
-  done
-}
- 
-# ******************************************************************************
-# Clean up the profile
-# 
-# ******************************************************************************
-clean_up()
-{
-  # Remove frames (and directories) if finding the PSNR
-  if $FIND_PSNR; then
-     rm -f $PSNR_CONT_DIR/*.ppm
-     rmdir $PSNR_CONT_DIR
-     rm -f $PSNR_COMP_DIR/*.ppm
-     rmdir $PSNR_COMP_DIR
-     
-     echo  >> "$PSNR_FRAME_LOG"  
-     echo  >> "$PSNR_FRAME_LOG"  
-  fi
-
-  rm -f stream.yuv
-  echo  >> "$LOGFILE"
-  echo  >> "$LOGFILE"
-  
-  echo  >> "$ERROR_LOG"
-  echo  >> "$ERROR_LOG"
-  
-  echo  >> "$ENC_LOG"
-  echo  >> "$ENC_LOG"
-}  
-  
-# ******************************************************************************
-# Print a summary of the profile
-# 
-# ******************************************************************************
-print_summary()
-{
-  SCRIPT_END=`date +%c`
-  echo
-  echo
-  precho "All finished profiling `basename \"$INFILE\"` with mpeg2enc."
-  precho "You have $DATA_POINTS new data points! (in $LOGFILE)"
-  if $KEEP_OUTFILES; then precho "And output movies! (in `pwd`)"; fi
-  if $TAKE_SNAP; then precho "And output stills! (in `pwd`)"; fi
-  precho "I started on       $SCRIPT_START"
-  precho "and finished on    $SCRIPT_END."
-  echo
-}
- 
-# ******************************************************************************
-# Clean up before running an encoding test.
-# Make note of the start time.
-# ******************************************************************************
-pre_test()
-{
-  rm -f stream.yuv >> "$ERROR_LOG" 2>&1
-  mkfifo stream.yuv >> "$ERROR_LOG" 2>&1
-
-  START_TIME=`date +%s`
-}
- 
-# ******************************************************************************
-# Encode the video.
-# 
-# ******************************************************************************
-encode()
-{
-  printf '%-80s\r' "Testing $CMD"
-  mplayer $MPLAYER_OPTS $MPLAYER_FRAMES -vo yuv4mpeg "$INFILE" >> "$ENC_LOG" 2>&1 &
-  PIDS="$PIDS $!"
-  cat stream.yuv | mpeg2enc $CMD >> "$ENC_LOG" 2>&1
-  wait
-}
- 
-# ******************************************************************************
-# Clean up after running an encoding test.
-# Make note of the encoding time and output file's size.
-# ******************************************************************************
-post_test()
-{
-  # Prepare output stats for the log
-  END_TIME=`date +%s`
-  TOT_TIME=`echo "scale=2; $END_TIME-$START_TIME" | bc -l`
-  FINAL_SIZE=`du -k "$OUTFILE.mpg" | awk '{print $1}'`
-  TIME_MULT=`echo "scale=2; $TOT_TIME/$DURATION" | bc -l`
-  BITRATE=`echo "scale=0; 8*$FINAL_SIZE/$DURATION" | bc -l`
-  
-  # Things to do on first control test only:
-  # Find the base control figures (bitrate and encoding time)
-  if test $CONTROL_ITER -eq 1
-  then
-    CONT_TIME=$TOT_TIME
-    CONT_BITR=$BITRATE
-  fi    
-  
-  NORM_TIME=`echo "scale=2; ((100*$TOT_TIME/$CONT_TIME)-100)" | bc -l`
-  NORM_BITR=`echo "scale=2; ((100*$BITRATE/$CONT_BITR)-100)" | bc -l`
-  
-  DATA_POINTS=`expr $DATA_POINTS + 1`
-}
- 
-# ******************************************************************************
-# Take a snapshot of a movie.
-# Args: $1 = file to take a snapshot of.
-# ******************************************************************************
-snap_shot()
-{
-  SNAPFILE="$1"
-  if $TAKE_SNAP; then
-     SSNAME=`basename $SNAPFILE`
-     mplayer $MPLAYER_OPTS -vo png -frames `expr $SNAP_FRAME + 1` "$SNAPFILE" >> "$ENC_LOG" 2>&1
-     sleep 2
-     mv 0*$SNAP_FRAME.png "frame-$SNAP_FRAME-$SSNAME.png" >> "$ERROR_LOG" 2>&1
-     rm -f 0*.png >> "$ERROR_LOG" 2>&1
-  fi
-}
- 
-# ******************************************************************************
-# Find the Peak-Signal-to-Noise Ratio between the source video and the
-# endcoded video.
-# ******************************************************************************
-calc_psnr()
-{
-  if $FIND_PSNR; then
-     mplayer -nosound -benchmark -noframedrop -noautosub $PSNR_MPLAY_FRAMES -vo $COMP_PNM "$OUTFILE.mpg" >> "$ENC_LOG" 2>&1
-     echo "\"Finding PSNR between the source file and $OUTFILE.mpg\"" >> $PSNR_FRAME_LOG
-     echo "`psnrcore -o \"$PSNR_CONT_DIR\" -c \"$PSNR_COMP_DIR\" -l \"$PSNR_FRAME_LOG\"`"
-  else
-     echo "not measured"
-  fi
-}
-
-# ******************************************************************************
-# Clean up the encoded movie.
-# 
-# ******************************************************************************
-rm_output()
-{
-  if $KEEP_OUTFILES; then :
-  else
-      rm -f "$OUTFILE.mpg" >> "$ERROR_LOG" 2>&1
-  fi
-}
- 
- 
- 
- 
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# MAIN
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-make_home
-read_config 
-get_args "$@"
-
-check_input
-set_up
-control start
-
-# While there are tests to run, get the next test and determine which test to call
-i=2
-while test $i -le `echo "$TEST_LIST" | awk -F ':' '{ print NF }'`; do
-   TEST=`echo $TEST_LIST | awk -F ':' "{ print $"$i" }"`
-   TEST_TYPE=`echo "$TEST" | awk '{ print NF }'`
-   case "$TEST_TYPE" in
-        "$FLAG_LENGTH" )
-            flag_test $TEST
-            ;;
-        "$SINGLE_LENGTH" )
-            range_test $TEST
-            ;;
-        "$DUAL_LENGTH" )
-            if echo "$TEST" | awk '{ print $1 }' | grep '\-[gG]' >> /dev/null 2>&1 && \
-               echo "$TEST" | awk '{ print $5 }' | grep '\-[gG]' >> /dev/null 2>&1
-            then
-               G_g_test $TEST
-            else
-               dual_range $TEST
-            fi
-            ;;
-   esac
-   i=`expr $i + 1`
-done
-
-control end
-clean_up
-print_summary
- 
-exit 0
\ No newline at end of file

Copied: trunk/src/psnrcore (from rev 14, trunk/src/psnrcore.sh)
===================================================================
--- trunk/src/psnrcore.sh	2005-12-06 09:47:44 UTC (rev 14)
+++ trunk/src/psnrcore	2006-02-16 09:06:47 UTC (rev 43)
@@ -0,0 +1,290 @@
+#! /bin/sh
+. lib-vidprofile
+
+# Peak Signal to Noise Ratio engine for comparing the PSNR between two
+# video files. 
+#
+# This script calculates the PSNR between two video files. The first video
+# file is generally the original video, and the second is a modified
+# version of the original. Often, the second video is encoded in a
+# different codec (or the same codec, but with different options), or uses
+# filters to improve or change the video. The aim of  this script is to
+# give concrete numbers to often subjective video quality comparisons.
+#
+# The script sequentially compares frames from both videos, calculating the
+# PSNR for each frame, and finally averages the overall PSNR for both
+# videos. Frame-by-frame data are written to a text file, while the final
+# PSNR is returned to standard out.
+
+# INPUT:  
+#    (1) a pointer to the directory containing numbered frames from the
+#        original video. The frames should be ppm.
+#    (2) a pointer to the directory containing numbered frames from the
+#        modified video (to be compared against the original video file).
+#        ppm format
+#    (3) a pointer to a file to which the PSNR for each frame will be
+#        written.
+#
+# OUTPUT: 
+#    (1) the overall, averaged PSNR between the two input directories.
+#    (2) a log file of the PSNR for every frame (as given by the input
+#        pointer).
+
+# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
+# Original shell script by Matthias Wieser, available in MPlayer CVS.
+# Modified on 2005 September 23.
+# 
+# This program is free software; you can redistribute it and/or 
+# modify it under the terms of the GNU General Public License 
+# as published by the Free Software Foundation; either 
+# version 2 of the License, or (at your option) any later 
+# version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# CONSTANTS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+PNM_SCRATCH=""
+
+# Frame-by-frame log headers
+LOG_HEADER="\"Frame\", \"Y (dB)\", \"Cb (dB)\", \"Cr (dB)\", \"PSNR (dB)\", \"Error\", \"Error Sum\""
+
+# Prepare the loop
+ERROR_SUM=0
+i=1
+
+USAGE=`cat << EOF
+
+psnrcore $VIDPROFILE_VERSION (build options: $BUILD_OPTS)
+
+Usage: psnrcore [OPTIONS] -o /path/to/original/video/frames \\\\
+                          -c /path/to/comparison/video/frames \\\\
+                          -l /path/to/psnr/log.csv
+
+  -o, -original   /path/to/original/video/frames
+  -c, -compare    /path/to/comparison/video/frames
+  -l, -log        /path/to/psnr/log.csv
+  -h, -help       display help and exit
+  -v, -version    print version and exit
+   
+See also
+  man psnrcore
+  
+EOF`
+
+
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# FUNCTIONS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+# ******************************************************************************
+# Read all command-line arguments
+# 
+# ******************************************************************************
+get_args()
+{
+    # Parse all arguments
+    while test $# -gt 0; do
+        case "$1" in
+            "-v" | "-version" )
+                precho "psnrcore $VIDPROFILE_VERSION (build options: $BUILD_OPTS)"
+                exit 0
+                ;;
+        
+            # Data log file
+            "-l" | "-log" )
+                shift
+                PSNR_LOG="$1"
+                ;;
+            
+            # Original video
+            "-o" | "-original" )
+                shift
+                ORIGINAL="$1"
+                ;;
+                
+            # Video to compare against original
+            "-c" | "-compare" )
+                shift
+                COMPARE="$1"
+                ;;
+                
+            # Display help
+            "-h" | "-help" )
+                precho -e "$USAGE"
+                exit 0
+                ;;
+                
+            # Null option; ignored.
+            "-" )
+                ;;
+
+            # If the option wasn't recognized, exit with an error
+            * )
+                exit_with_error "Error: Unrecognized command-line option $1. (try -help)"
+                ;;
+            esac
+
+        # Get next argument
+        shift
+    done
+}
+
+
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# BASIC SET-UP
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+get_args "$@"
+
+# Sanity checks
+# Only three input arguments ok
+if test $# -ne 6; then
+   exit_with_error "Incorrect number of options. Please specify -o, -c, and -l. (try -help)"
+fi
+
+# Check for pnmpsnr
+check_optional_dependency "pnmpsnr" "psnrcore"
+
+# Do the directories exist?
+if test -d "$ORIGINAL"; then :
+else
+   exit_with_error "Could not find orignal frames directory: $ORIGINAL."
+fi
+
+if test -d "$COMPARE"; then :
+else
+   exit_with_error "Could not find comparison frames directory: $COMPARE."
+fi
+
+touch $PSNR_LOG
+
+# Find how many frames to compare (NUM_FRAMES), and which directory 
+# limits the tests (FRAME_DIR).
+NUM_ORIG_FRAMES=`ls -1 ${ORIGINAL}/*ppm | wc -l`
+NUM_COMP_FRAMES=`ls -1 ${COMPARE}/*ppm | wc -l`
+
+if test $NUM_ORIG_FRAMES -ne $NUM_COMP_FRAMES; then
+   echo "\"Found $NUM_ORIG_FRAMES original frames and $NUM_COMP_FRAMES comparison frames!\"" >> $PSNR_LOG
+   if test $NUM_ORIG_FRAMES -gt $NUM_COMP_FRAMES; then
+      echo "\"Using the first $NUM_COMP_FRAMES for PSNR calculation.\"" >> $PSNR_LOG
+      NUM_FRAMES=$NUM_COMP_FRAMES
+      FRAME_DIR=$COMPARE
+   else
+      echo "\"Using the first $NUM_ORIG_FRAMES for PSNR calculation.\"" >> $PSNR_LOG
+      NUM_FRAMES=$NUM_ORIG_FRAMES
+      FRAME_DIR=$ORIGINAL
+   fi
+else
+   echo "\"Found $NUM_ORIG_FRAMES frames to compare for PSNR calculation.\"" >> $PSNR_LOG
+   NUM_FRAMES=$NUM_ORIG_FRAMES
+   FRAME_DIR=$ORIGINAL
+fi
+
+echo $LOG_HEADER >> $PSNR_LOG
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# CALCULATE THE PEAK SIGNAL TO NOISE RATIO
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+for frame in $( find $FRAME_DIR -name "*.ppm" | sort )
+do
+     # Assume the input frames are different to begin with
+     NO_DIFF=false
+
+     FRAME=`basename $frame`
+     CMD="pnmpsnr $ORIGINAL/$FRAME $COMPARE/$FRAME 2>&1"
+     
+     PNM_SCRATCH=`eval $CMD`
+     
+     # Extract the individual (luma and chroma) PSNR
+     # NOTE: pnmpsnr output says: "xx color component doesn't differ"
+     #       when the two images are exactly the same,
+     #       but the ' is not greppable in a shell, AFAIK
+     #       Also, the Cb line has inconsistent spacing.
+     if echo "$PNM_SCRATCH" | grep "differ" >> /dev/null 2>&1
+     then
+        Y="inf"
+        CB="inf"
+        CR="inf"
+        NO_DIFF=:
+     else
+        Y=`echo "$PNM_SCRATCH" | grep "Y" | awk '{ print $5 }'`
+        CB=`echo "$PNM_SCRATCH" | grep "Cb" | awk '{ print $5 }'`
+        CR=`echo "$PNM_SCRATCH" | grep "Cr" | awk '{ print $5 }'`
+     fi
+     
+     # Find the average for the frame and calculate the error
+     # Find PSNR if every component is different
+     if $NO_DIFF
+     then
+        ALL="inf"
+        ERROR="0"
+     else
+        ALL=`echo "(-10)*l((e(-$Y/10*l(10))+e(-$CB/10*l(10))/4+e(-$CR/10*l(10))/4)/1.5)/l(10)" | bc -l`
+        ERROR=`echo "scale=30; (e(-1*$Y/10*l(10))+e(-1*$CB/10*l(10))/4+e(-1*$CR/10*l(10))/4)/1.5" | bc -l`
+     fi
+     
+     ERROR_SUM=`echo "scale=30; $ERROR + $ERROR_SUM" | bc -l`
+     
+     echo "\"$i\", \"$Y\", \"$CB\", \"$CR\", \"$ALL\", \"$ERROR\", \"$ERROR_SUM\"" >> $PSNR_LOG
+     
+     if test $i -eq $NUM_FRAMES; then
+        break
+     fi
+     
+     i=$(($i+1))
+done
+
+# Calculate final statistics
+# If every frame was the same as the original, then the ERROR_SUM will be 0. In that case,
+# the PSNR cannot be computed because log(0) is undefined. Instead, the PSNR is 'infinite'.
+ZERO_ERROR=`echo "if ( $ERROR_SUM == 0 ) \":\" else \"false\"" | bc -l` 
+if $ZERO_ERROR; then
+   PSNR="inf"
+else
+   PSNR=`echo "-10*l($ERROR_SUM/$i)/l(10)" | bc -l`
+fi
+
+echo "\"$i frames\", \"AVG\", \"AVG\", \"AVG\", \"$PSNR\", \"AVG\", \"$ERROR_SUM\"" >> $PSNR_LOG
+
+precho $PSNR
\ No newline at end of file

Deleted: trunk/src/psnrcore.sh
===================================================================
--- trunk/src/psnrcore.sh	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/src/psnrcore.sh	2006-02-16 09:06:47 UTC (rev 43)
@@ -1,290 +0,0 @@
-# -* sh *-
-. lib-vidprofile
-
-# Peak Signal to Noise Ratio engine for comparing the PSNR between two
-# video files. 
-#
-# This script calculates the PSNR between two video files. The first video
-# file is generally the original video, and the second is a modified
-# version of the original. Often, the second video is encoded in a
-# different codec (or the same codec, but with different options), or uses
-# filters to improve or change the video. The aim of  this script is to
-# give concrete numbers to often subjective video quality comparisons.
-#
-# The script sequentially compares frames from both videos, calculating the
-# PSNR for each frame, and finally averages the overall PSNR for both
-# videos. Frame-by-frame data are written to a text file, while the final
-# PSNR is returned to standard out.
-
-# INPUT:  
-#    (1) a pointer to the directory containing numbered frames from the
-#        original video. The frames should be ppm.
-#    (2) a pointer to the directory containing numbered frames from the
-#        modified video (to be compared against the original video file).
-#        ppm format
-#    (3) a pointer to a file to which the PSNR for each frame will be
-#        written.
-#
-# OUTPUT: 
-#    (1) the overall, averaged PSNR between the two input directories.
-#    (2) a log file of the PSNR for every frame (as given by the input
-#        pointer).
-
-# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
-# Original shell script by Matthias Wieser, available in MPlayer CVS.
-# Modified on 2005 September 23.
-# 
-# This program is free software; you can redistribute it and/or 
-# modify it under the terms of the GNU General Public License 
-# as published by the Free Software Foundation; either 
-# version 2 of the License, or (at your option) any later 
-# version.
-# 
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# CONSTANTS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-PNM_SCRATCH=""
-
-# Frame-by-frame log headers
-LOG_HEADER="\"Frame\", \"Y (dB)\", \"Cb (dB)\", \"Cr (dB)\", \"PSNR (dB)\", \"Error\", \"Error Sum\""
-
-# Prepare the loop
-ERROR_SUM=0
-i=1
-
-USAGE=`cat << EOF
-
-psnrcore $VIDPROFILE_VERSION (build options: $BUILD_OPTS)
-
-Usage: psnrcore [OPTIONS] -o /path/to/original/video/frames \\\\
-                          -c /path/to/comparison/video/frames \\\\
-                          -l /path/to/psnr/log.csv
-
-  -o, -original   /path/to/original/video/frames
-  -c, -compare    /path/to/comparison/video/frames
-  -l, -log        /path/to/psnr/log.csv
-  -h, -help       display help and exit
-  -v, -version    print version and exit
-   
-See also
-  man psnrcore
-  
-EOF`
-
-
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# FUNCTIONS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-# ******************************************************************************
-# Read all command-line arguments
-# 
-# ******************************************************************************
-get_args()
-{
-    # Parse all arguments
-    while test $# -gt 0; do
-        case "$1" in
-            "-v" | "-version" )
-                precho "psnrcore $VIDPROFILE_VERSION (build options: $BUILD_OPTS)"
-                exit 0
-                ;;
-        
-            # Data log file
-            "-l" | "-log" )
-                shift
-                PSNR_LOG="$1"
-                ;;
-            
-            # Original video
-            "-o" | "-original" )
-                shift
-                ORIGINAL="$1"
-                ;;
-                
-            # Video to compare against original
-            "-c" | "-compare" )
-                shift
-                COMPARE="$1"
-                ;;
-                
-            # Display help
-            "-h" | "-help" )
-                precho -e "$USAGE"
-                exit 0
-                ;;
-                
-            # Null option; ignored.
-            "-" )
-                ;;
-
-            # If the option wasn't recognized, exit with an error
-            * )
-                exit_with_error "Error: Unrecognized command-line option $1. (try -help)"
-                ;;
-            esac
-
-        # Get next argument
-        shift
-    done
-}
-
-
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# BASIC SET-UP
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-get_args "$@"
-
-# Sanity checks
-# Only three input arguments ok
-if test $# -ne 6; then
-   exit_with_error "Incorrect number of options. Please specify -o, -c, and -l. (try -help)"
-fi
-
-# Check for pnmpsnr
-check_optional_dependency "pnmpsnr" "psnrcore"
-
-# Do the directories exist?
-if test -d "$ORIGINAL"; then :
-else
-   exit_with_error "Could not find orignal frames directory: $ORIGINAL."
-fi
-
-if test -d "$COMPARE"; then :
-else
-   exit_with_error "Could not find comparison frames directory: $COMPARE."
-fi
-
-touch $PSNR_LOG
-
-# Find how many frames to compare (NUM_FRAMES), and which directory 
-# limits the tests (FRAME_DIR).
-NUM_ORIG_FRAMES=`ls -1 ${ORIGINAL}/*ppm | wc -l`
-NUM_COMP_FRAMES=`ls -1 ${COMPARE}/*ppm | wc -l`
-
-if test $NUM_ORIG_FRAMES -ne $NUM_COMP_FRAMES; then
-   echo "\"Found $NUM_ORIG_FRAMES original frames and $NUM_COMP_FRAMES comparison frames!\"" >> $PSNR_LOG
-   if test $NUM_ORIG_FRAMES -gt $NUM_COMP_FRAMES; then
-      echo "\"Using the first $NUM_COMP_FRAMES for PSNR calculation.\"" >> $PSNR_LOG
-      NUM_FRAMES=$NUM_COMP_FRAMES
-      FRAME_DIR=$COMPARE
-   else
-      echo "\"Using the first $NUM_ORIG_FRAMES for PSNR calculation.\"" >> $PSNR_LOG
-      NUM_FRAMES=$NUM_ORIG_FRAMES
-      FRAME_DIR=$ORIGINAL
-   fi
-else
-   echo "\"Found $NUM_ORIG_FRAMES frames to compare for PSNR calculation.\"" >> $PSNR_LOG
-   NUM_FRAMES=$NUM_ORIG_FRAMES
-   FRAME_DIR=$ORIGINAL
-fi
-
-echo $LOG_HEADER >> $PSNR_LOG
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# CALCULATE THE PEAK SIGNAL TO NOISE RATIO
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-for frame in $( find $FRAME_DIR -name "*.ppm" | sort )
-do
-     # Assume the input frames are different to begin with
-     NO_DIFF=false
-
-     FRAME=`basename $frame`
-     CMD="pnmpsnr $ORIGINAL/$FRAME $COMPARE/$FRAME 2>&1"
-     
-     PNM_SCRATCH=`eval $CMD`
-     
-     # Extract the individual (luma and chroma) PSNR
-     # NOTE: pnmpsnr output says: "xx color component doesn't differ"
-     #       when the two images are exactly the same,
-     #       but the ' is not greppable in a shell, AFAIK
-     #       Also, the Cb line has inconsistent spacing.
-     if echo "$PNM_SCRATCH" | grep "differ" >> /dev/null 2>&1
-     then
-        Y="inf"
-        CB="inf"
-        CR="inf"
-        NO_DIFF=:
-     else
-        Y=`echo "$PNM_SCRATCH" | grep "Y" | awk '{ print $5 }'`
-        CB=`echo "$PNM_SCRATCH" | grep "Cb" | awk '{ print $5 }'`
-        CR=`echo "$PNM_SCRATCH" | grep "Cr" | awk '{ print $5 }'`
-     fi
-     
-     # Find the average for the frame and calculate the error
-     # Find PSNR if every component is different
-     if $NO_DIFF
-     then
-        ALL="inf"
-        ERROR="0"
-     else
-        ALL=`echo "(-10)*l((e(-$Y/10*l(10))+e(-$CB/10*l(10))/4+e(-$CR/10*l(10))/4)/1.5)/l(10)" | bc -l`
-        ERROR=`echo "scale=30; (e(-1*$Y/10*l(10))+e(-1*$CB/10*l(10))/4+e(-1*$CR/10*l(10))/4)/1.5" | bc -l`
-     fi
-     
-     ERROR_SUM=`echo "scale=30; $ERROR + $ERROR_SUM" | bc -l`
-     
-     echo "\"$i\", \"$Y\", \"$CB\", \"$CR\", \"$ALL\", \"$ERROR\", \"$ERROR_SUM\"" >> $PSNR_LOG
-     
-     if test $i -eq $NUM_FRAMES; then
-        break
-     fi
-     
-     i=$(($i+1))
-done
-
-# Calculate final statistics
-# If every frame was the same as the original, then the ERROR_SUM will be 0. In that case,
-# the PSNR cannot be computed because log(0) is undefined. Instead, the PSNR is 'infinite'.
-ZERO_ERROR=`echo "if ( $ERROR_SUM == 0 ) \":\" else \"false\"" | bc -l` 
-if $ZERO_ERROR; then
-   PSNR="inf"
-else
-   PSNR=`echo "-10*l($ERROR_SUM/$i)/l(10)" | bc -l`
-fi
-
-echo "\"$i frames\", \"AVG\", \"AVG\", \"AVG\", \"$PSNR\", \"AVG\", \"$ERROR_SUM\"" >> $PSNR_LOG
-
-precho $PSNR
\ No newline at end of file

Copied: trunk/src/vidpsnr (from rev 14, trunk/src/vidpsnr.sh)
===================================================================
--- trunk/src/vidpsnr.sh	2005-12-06 09:47:44 UTC (rev 14)
+++ trunk/src/vidpsnr	2006-02-16 09:06:47 UTC (rev 43)
@@ -0,0 +1,295 @@
+#! /bin/sh
+. lib-vidprofile
+
+# Peak Signal to Noise Ratio script for comparing the PSNR between two video
+# files
+
+# This script calculates the PSNR between two video files. The first video file
+# is generally the original video, and the second is a modified version of the
+# original. Often, the second video is encoded in a different codec, or uses
+# filters to improve or change the video. The aim of this script is to give
+# concrete numbers to often subjective video quality comparisons.
+#
+# The script calls psnrcore, which sequentially compares frames from both
+# videos, calculating the PSNR for each frame, and finally averages the overall
+# PSNR for both videos. Frame-by-frame data are written to a text file, while
+# the final PSNR is returned to standard out.
+
+# INPUT:  (1) a pointer to the original video file.
+#         (2) a pointer to the modified video file (to be compared against the 
+#             original video file)
+#         (3) a pointer to a file to which the PSNR for each frame will be
+#              written.
+#         (4) the number of frames to compare, starting from the first frame.
+#         (5) options to pass to MPlayer when creating frames from the original
+#             video. Useful to add filters.
+#         (6) options to pass to MPlayer when creating frames from the
+#             comparison
+#             video. Ueeful to add filters.
+#
+# OUTPUT: (1) the overall, averaged PSNR between the two input directories.
+#         (2) a log file of the PSNR for every frame (as given by the input
+#             pointer).
+
+# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
+# Original shell script by Matthias Wieser, available in MPlayer CVS.
+# Modified on 2005 September 23.
+# 
+# This program is free software; you can redistribute it and/or 
+# modify it under the terms of the GNU General Public License 
+# as published by the Free Software Foundation; either 
+# version 2 of the License, or (at your option) any later 
+# version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# CONSTANTS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+ORIG_DIR=./orig
+COMP_DIR=./comp
+
+MPLAYER_OPTS="-benchmark -nosound -noframedrop -noautosub"
+
+USAGE=`cat << EOF
+
+vidpsnr $VIDPROFILE_VERSION (build options: $BUILD_OPTS)
+
+Usage: vidpsnr [OPTIONS] -o /path/to/original/video.avi \\\\
+                         -c /path/to/comparison/video.avi \\\\
+                         -l /path/to/psnr/log.csv
+
+  -o, -original /path/to/original/video.avi   base video
+  -c, -compare /path/to/comparison/video.avi  comparison video
+  -l, -log /path/to/psnr/log.csv              where to put the PSNR log
+  -f, -frame FRAME                            find PSNR for FRAME frames
+  -oo, -orig_opts "MPLAYER OPTIONS"           use extra options for original
+  -co, -comp_opts "MPLAYER OPTIONS"           use extra options for comparison
+  -h, -help                                   display help and exit
+  -v, -version                                print version and exit
+   
+See also
+  man vidpsnr
+  
+EOF`
+
+
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# DEFAULTS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+ORIGINAL=""
+COMPARE=""
+PSNR_LOG=""
+LAST_FRAME=""
+MPLAY_FRAMES=""
+ORIG_OPTS=""
+COMP_OPTS=""
+
+
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# FUNCTIONS
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+# ******************************************************************************
+# Read all command-line arguments
+# 
+# ******************************************************************************
+get_args()
+{
+    # Parse all arguments
+    while test $# -gt 0; do
+        case "$1" in
+            "-v" | "-version" )
+                precho "vidpsnr $VIDPROFILE_VERSION (build options: $BUILD_OPTS)"
+                exit 0
+                ;;
+        
+            # Data log file
+            "-l" | "-log" )
+                shift
+                PSNR_LOG="$1"
+                ;;
+            
+            # Original video
+            "-o" | "-original" )
+                shift
+                ORIGINAL="$1"
+                ;;
+                
+            # Video to compare against original
+            "-c" | "-compare" )
+                shift
+                COMPARE="$1"
+                ;;
+                
+            # Last frame to compare
+            "-f" | "-frame" )
+                shift
+                LAST_FRAME="$1"
+                MPLAY_FRAMES="-frames $LAST_FRAME"
+                ;;
+            
+            # mplayer options for the original file
+            "-oo" | "-origopts" )
+                shift
+                ORIG_OPTS="$1"
+                ;;
+                
+            # mplayer options for the comparison file
+            "-co" | "-compopts" )
+                shift
+                COMP_OPTS="$1"
+                ;;
+                
+            # Display help
+            "-h" | "-help" )
+                precho -e "$USAGE"
+                exit 0
+                ;;
+                
+            # Null option; ignored.
+            "-" )
+                ;;
+
+            # If the option wasn't recognized, exit with an error
+            * )
+                exit_with_error "Error: Unrecognized command-line option $1. (try -help)"
+                ;;
+            esac
+
+        # Get next argument
+        shift
+    done
+}
+
+# ******************************************************************************
+# Remove the frames and their directories.
+# 
+# ******************************************************************************
+clean_up()
+{
+   rm -f $ORIG_DIR/*.ppm
+   rm -f $COMP_DIR/*.ppm
+   rmdir $ORIG_DIR
+   rmdir $COMP_DIR
+}
+
+
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# BASIC SET-UP
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+get_args "$@"
+
+# Sanity checks
+
+# Check for pnmpsnr
+check_optional_dependency "pnmpsnr" "vidpsnr"
+
+# Check for necessary options
+if test -z "$ORIGINAL" && test -z "$COMPARE" && test -z "$PSNR_LOG"; then
+   exit_with_error "One or more required options is missing. Please specify -o, -c, and -l. (try -help)"
+fi
+
+# Do the videos exist?
+if test -f "$ORIGINAL"; then :
+else
+   exit_with_error "Could not find orignal video file: $ORIGINAL."
+fi
+
+if test -f "$COMPARE"; then :
+else
+   exit_with_error "Could not find comparison video file: $COMPARE."
+fi
+
+if test -d $ORIG_DIR; then :
+else mkdir $ORIG_DIR; fi
+
+if test -d $ORIG_DIR; then :
+else mkdir $COMP_DIR; fi
+
+rm -f $ORIG_DIR/*.ppm
+rm -f $COMP_DIR/*.ppm
+
+
+# ******************************************************************************
+# ******************************************************************************
+#
+#
+# EXTRACT FRAMES FROM VIDEOS AND EVALUATE PSNR
+#
+#
+# ******************************************************************************
+# ******************************************************************************
+
+# Create frames from the original video file
+echo
+precho "Making frames from $ORIGINAL"
+
+CMD="mplayer $MPLAYER_OPTS $ORIG_OPTS $MPLAY_FRAMES -vo pnm:outdir=$ORIG_DIR $ORIGINAL > /dev/null"
+precho $CMD
+eval $CMD
+
+# Create frames from the comparison video file
+echo
+precho "Making frames from $COMPARE"
+
+CMD="mplayer $MPLAYER_OPTS $COMP_OPTS $MPLAY_FRAMES -vo pnm:outdir=$COMP_DIR $COMPARE > /dev/null"
+precho $CMD
+eval $CMD
+
+# Calculate the PSNR for the two videos
+echo
+precho "Finding PSNR between $ORIGINAL and $COMPARE"
+
+if PSNR=`psnrcore -o $ORIG_DIR -c $COMP_DIR -l $PSNR_LOG`; then
+   clean_up
+   echo
+   precho "PSNR: $PSNR"
+   precho "Frame report: $PSNR_LOG"
+else
+   clean_up
+   precho "There is a problem with psnrcore! Could not find the PSNR:"
+   exit_with_error "$PSNR"   
+fi
+
+exit 0
\ No newline at end of file

Deleted: trunk/src/vidpsnr.sh
===================================================================
--- trunk/src/vidpsnr.sh	2006-02-06 09:23:51 UTC (rev 42)
+++ trunk/src/vidpsnr.sh	2006-02-16 09:06:47 UTC (rev 43)
@@ -1,295 +0,0 @@
-# -* sh *-
-. lib-vidprofile
-
-# Peak Signal to Noise Ratio script for comparing the PSNR between two video
-# files
-
-# This script calculates the PSNR between two video files. The first video file
-# is generally the original video, and the second is a modified version of the
-# original. Often, the second video is encoded in a different codec, or uses
-# filters to improve or change the video. The aim of this script is to give
-# concrete numbers to often subjective video quality comparisons.
-#
-# The script calls psnrcore, which sequentially compares frames from both
-# videos, calculating the PSNR for each frame, and finally averages the overall
-# PSNR for both videos. Frame-by-frame data are written to a text file, while
-# the final PSNR is returned to standard out.
-
-# INPUT:  (1) a pointer to the original video file.
-#         (2) a pointer to the modified video file (to be compared against the 
-#             original video file)
-#         (3) a pointer to a file to which the PSNR for each frame will be
-#              written.
-#         (4) the number of frames to compare, starting from the first frame.
-#         (5) options to pass to MPlayer when creating frames from the original
-#             video. Useful to add filters.
-#         (6) options to pass to MPlayer when creating frames from the
-#             comparison
-#             video. Ueeful to add filters.
-#
-# OUTPUT: (1) the overall, averaged PSNR between the two input directories.
-#         (2) a log file of the PSNR for every frame (as given by the input
-#             pointer).
-
-# Copyright (C) 2005 Joe Friedrichsen <friedrij at users.berlios.de>
-# Original shell script by Matthias Wieser, available in MPlayer CVS.
-# Modified on 2005 September 23.
-# 
-# This program is free software; you can redistribute it and/or 
-# modify it under the terms of the GNU General Public License 
-# as published by the Free Software Foundation; either 
-# version 2 of the License, or (at your option) any later 
-# version.
-# 
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# CONSTANTS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-ORIG_DIR=./orig
-COMP_DIR=./comp
-
-MPLAYER_OPTS="-benchmark -nosound -noframedrop -noautosub"
-
-USAGE=`cat << EOF
-
-vidpsnr $VIDPROFILE_VERSION (build options: $BUILD_OPTS)
-
-Usage: vidpsnr [OPTIONS] -o /path/to/original/video.avi \\\\
-                         -c /path/to/comparison/video.avi \\\\
-                         -l /path/to/psnr/log.csv
-
-  -o, -original /path/to/original/video.avi   base video
-  -c, -compare /path/to/comparison/video.avi  comparison video
-  -l, -log /path/to/psnr/log.csv              where to put the PSNR log
-  -f, -frame FRAME                            find PSNR for FRAME frames
-  -oo, -orig_opts "MPLAYER OPTIONS"           use extra options for original
-  -co, -comp_opts "MPLAYER OPTIONS"           use extra options for comparison
-  -h, -help                                   display help and exit
-  -v, -version                                print version and exit
-   
-See also
-  man vidpsnr
-  
-EOF`
-
-
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# DEFAULTS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-ORIGINAL=""
-COMPARE=""
-PSNR_LOG=""
-LAST_FRAME=""
-MPLAY_FRAMES=""
-ORIG_OPTS=""
-COMP_OPTS=""
-
-
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# FUNCTIONS
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-# ******************************************************************************
-# Read all command-line arguments
-# 
-# ******************************************************************************
-get_args()
-{
-    # Parse all arguments
-    while test $# -gt 0; do
-        case "$1" in
-            "-v" | "-version" )
-                precho "vidpsnr $VIDPROFILE_VERSION (build options: $BUILD_OPTS)"
-                exit 0
-                ;;
-        
-            # Data log file
-            "-l" | "-log" )
-                shift
-                PSNR_LOG="$1"
-                ;;
-            
-            # Original video
-            "-o" | "-original" )
-                shift
-                ORIGINAL="$1"
-                ;;
-                
-            # Video to compare against original
-            "-c" | "-compare" )
-                shift
-                COMPARE="$1"
-                ;;
-                
-            # Last frame to compare
-            "-f" | "-frame" )
-                shift
-                LAST_FRAME="$1"
-                MPLAY_FRAMES="-frames $LAST_FRAME"
-                ;;
-            
-            # mplayer options for the original file
-            "-oo" | "-origopts" )
-                shift
-                ORIG_OPTS="$1"
-                ;;
-                
-            # mplayer options for the comparison file
-            "-co" | "-compopts" )
-                shift
-                COMP_OPTS="$1"
-                ;;
-                
-            # Display help
-            "-h" | "-help" )
-                precho -e "$USAGE"
-                exit 0
-                ;;
-                
-            # Null option; ignored.
-            "-" )
-                ;;
-
-            # If the option wasn't recognized, exit with an error
-            * )
-                exit_with_error "Error: Unrecognized command-line option $1. (try -help)"
-                ;;
-            esac
-
-        # Get next argument
-        shift
-    done
-}
-
-# ******************************************************************************
-# Remove the frames and their directories.
-# 
-# ******************************************************************************
-clean_up()
-{
-   rm -f $ORIG_DIR/*.ppm
-   rm -f $COMP_DIR/*.ppm
-   rmdir $ORIG_DIR
-   rmdir $COMP_DIR
-}
-
-
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# BASIC SET-UP
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-get_args "$@"
-
-# Sanity checks
-
-# Check for pnmpsnr
-check_optional_dependency "pnmpsnr" "vidpsnr"
-
-# Check for necessary options
-if test -z "$ORIGINAL" && test -z "$COMPARE" && test -z "$PSNR_LOG"; then
-   exit_with_error "One or more required options is missing. Please specify -o, -c, and -l. (try -help)"
-fi
-
-# Do the videos exist?
-if test -f "$ORIGINAL"; then :
-else
-   exit_with_error "Could not find orignal video file: $ORIGINAL."
-fi
-
-if test -f "$COMPARE"; then :
-else
-   exit_with_error "Could not find comparison video file: $COMPARE."
-fi
-
-if test -d $ORIG_DIR; then :
-else mkdir $ORIG_DIR; fi
-
-if test -d $ORIG_DIR; then :
-else mkdir $COMP_DIR; fi
-
-rm -f $ORIG_DIR/*.ppm
-rm -f $COMP_DIR/*.ppm
-
-
-# ******************************************************************************
-# ******************************************************************************
-#
-#
-# EXTRACT FRAMES FROM VIDEOS AND EVALUATE PSNR
-#
-#
-# ******************************************************************************
-# ******************************************************************************
-
-# Create frames from the original video file
-echo
-precho "Making frames from $ORIGINAL"
-
-CMD="mplayer $MPLAYER_OPTS $ORIG_OPTS $MPLAY_FRAMES -vo pnm:outdir=$ORIG_DIR $ORIGINAL > /dev/null"
-precho $CMD
-eval $CMD
-
-# Create frames from the comparison video file
-echo
-precho "Making frames from $COMPARE"
-
-CMD="mplayer $MPLAYER_OPTS $COMP_OPTS $MPLAY_FRAMES -vo pnm:outdir=$COMP_DIR $COMPARE > /dev/null"
-precho $CMD
-eval $CMD
-
-# Calculate the PSNR for the two videos
-echo
-precho "Finding PSNR between $ORIGINAL and $COMPARE"
-
-if PSNR=`psnrcore -o $ORIG_DIR -c $COMP_DIR -l $PSNR_LOG`; then
-   clean_up
-   echo
-   precho "PSNR: $PSNR"
-   precho "Frame report: $PSNR_LOG"
-else
-   clean_up
-   precho "There is a problem with psnrcore! Could not find the PSNR:"
-   exit_with_error "$PSNR"   
-fi
-
-exit 0
\ No newline at end of file



